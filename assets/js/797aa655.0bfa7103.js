"use strict";(self.webpackChunkklogging=self.webpackChunkklogging||[]).push([[716],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>d});var l=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,l,a=function(e,n){if(null==e)return{};var t,l,a={},i=Object.keys(e);for(l=0;l<i.length;l++)t=i[l],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)t=i[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var g=l.createContext({}),s=function(e){var n=l.useContext(g),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return l.createElement(g.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},m=l.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,g=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=s(t),m=a,d=c["".concat(g,".").concat(m)]||c[m]||u[m]||i;return t?l.createElement(d,o(o({ref:n},p),{},{components:t})):l.createElement(d,o({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var r={};for(var g in n)hasOwnProperty.call(n,g)&&(r[g]=n[g]);r.originalType=e,r[c]="string"==typeof e?e:a,o[1]=r;for(var s=2;s<i;s++)o[s]=t[s];return l.createElement.apply(null,o)}return l.createElement.apply(null,t)}m.displayName="MDXCreateElement"},364:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>s});var l=t(8168),a=(t(6540),t(5680));const i={sidebar_position:10},o="Sending log events",r={unversionedId:"logging/sending-logs",id:"logging/sending-logs",title:"Sending log events",description:"Once you have a logger, you can call functions on it to send log events. The base function is log():",source:"@site/docs/logging/sending-logs.md",sourceDirName:"logging",slug:"/logging/sending-logs",permalink:"/docs/logging/sending-logs",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Defining loggers",permalink:"/docs/loggers/defining-loggers"},next:{title:"Coroutines",permalink:"/docs/coroutines/"}},g={},s=[{value:"Utility functions",id:"utility-functions",level:2},{value:"Logging patterns",id:"logging-patterns",level:2},{value:"String message",id:"string-message",level:3},{value:"Message template",id:"message-template",level:3},{value:"Immediate context items",id:"immediate-context-items",level:3},{value:"Exception",id:"exception",level:3},{value:"Minimum level check",id:"minimum-level-check",level:3},{value:"Kotlin lambda",id:"kotlin-lambda",level:3},{value:"Lambda and exception",id:"lambda-and-exception",level:3}],p={toc:s},c="wrapper";function u(e){let{components:n,...i}=e;return(0,a.yg)(c,(0,l.A)({},p,i,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"sending-log-events"},"Sending log events"),(0,a.yg)("p",null,"Once you have a logger, you can call functions on it to send log events. The base function is ",(0,a.yg)("inlineCode",{parentName:"p"},"log()"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},'    logger.log(Level.INFO, "Application started")\n')),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("p",{parentName:"admonition"},"All the information here applies to both the coroutine logger ",(0,a.yg)("inlineCode",{parentName:"p"},"Klogger")," and the non-coroutine\nlogger ",(0,a.yg)("inlineCode",{parentName:"p"},"NoCoLogger"),".")),(0,a.yg)("h2",{id:"utility-functions"},"Utility functions"),(0,a.yg)("p",null,"These utility functions are a convenient way to send logs. They call ",(0,a.yg)("inlineCode",{parentName:"p"},"log()")," with the\nappropriate level:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"trace()")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"debug()")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"info()")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"warn()")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"error()")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"fatal()"))),(0,a.yg)("h2",{id:"logging-patterns"},"Logging patterns"),(0,a.yg)("p",null,"Klogging offers a range of patterns for different logging scenarios. The patterns shown here apply\nto ",(0,a.yg)("inlineCode",{parentName:"p"},"log()")," and all utility functions."),(0,a.yg)("h3",{id:"string-message"},"String message"),(0,a.yg)("p",null,"The simplest pattern is to send a string, for example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},'    logger.info("Processing started")\n    // meaningful code\n    val response = callOtherService()\n    logger.info("User response was ${response.text}")\n')),(0,a.yg)("h3",{id:"message-template"},"Message template"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"/docs/context/message-templates"},"Message templates")," provide a convenient way to both create meaningful\nmessages and to create structured log events:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},'    logger.info("User {userId} signed in", userId)\n')),(0,a.yg)("p",null,"The resulting log event contains both:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"the message populated with the value of ",(0,a.yg)("inlineCode",{parentName:"li"},"userId"),"; and"),(0,a.yg)("li",{parentName:"ul"},"an item called ",(0,a.yg)("inlineCode",{parentName:"li"},"userId")," with the same value.")),(0,a.yg)("p",null,"For example, if ",(0,a.yg)("inlineCode",{parentName:"p"},"userId")," has the value ",(0,a.yg)("inlineCode",{parentName:"p"},"wonti321")," then:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"the message becomes ",(0,a.yg)("inlineCode",{parentName:"li"},"User wonti321 signed in"),"; and"),(0,a.yg)("li",{parentName:"ul"},"the log event contains ",(0,a.yg)("inlineCode",{parentName:"li"},'"userId": "wonti321"'),".")),(0,a.yg)("p",null,"The log event displayed in Splunk may look like this:"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Example of structured event message in Splunk",src:t(7547).A,width:"672",height:"290"})),(0,a.yg)("h3",{id:"immediate-context-items"},"Immediate context items"),(0,a.yg)("p",null,"You can specify a map of items to add to the context of a single log event."),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("p",{parentName:"admonition"},"Immediate context items are useful with ",(0,a.yg)("inlineCode",{parentName:"p"},"NoCoLogger")," instances, where there is no coroutine\ncontext available.")),(0,a.yg)("p",null,"A simple example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},'logger.info("Retrieved values from services", mapOf(\n    "serviceOneCount" to serviceOneResult.count,\n    "serviceTwoCount" to serviceTwoResult.count,\n))\n')),(0,a.yg)("p",null,"The resulting log event may look like something like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "@t": "2024-02-05T07:45:47.837117Z",\n  "@l": "INFO",\n  "@m": "Retrieved values from services",\n  "host": "589ef8fa",\n  "logger": "com.example.ServiceCombiner",\n  "context": "main",\n  "serviceOneCount": 9,\n  "serviceTwoCount": 17\n}\n')),(0,a.yg)("h3",{id:"exception"},"Exception"),(0,a.yg)("p",null,"To log exception information, include the exception object as the first argument in the function call:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},'    try {\n        // This might throw an exception\n        snurgle(id, agger)\n    } catch (ex: SnurgleException) {\n        logger.warn(ex, "Exception calling snurgle with id={id} and agger={agger}", id, agger)\n    }\n')),(0,a.yg)("p",null,"The resulting log event will include any stack trace included in the exception."),(0,a.yg)("h3",{id:"minimum-level-check"},"Minimum level check"),(0,a.yg)("p",null,"Every logger has a minimum level set by configuration, below which log events are not sent.\nSee ",(0,a.yg)("a",{parentName:"p",href:"../internals/level-checking"},"Log levels and checking")," for more details."),(0,a.yg)("p",null,"Klogging provides functions to check minimum levels to call before calling a logging function\nif the values to be logged are expensive to obtain."),(0,a.yg)("p",null,"Here is one example, where ",(0,a.yg)("inlineCode",{parentName:"p"},"DEBUG")," logging might not be enabled for this logger in all environments:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},'    if (logger.isDebugEnabled()) {\n        val complex = calculateSpecialValueForDebugging()\n        val other = extractOtherValueFromSomewhereElse()\n        logger.debug("Calculated {complex} and {other}", complex, other)\n    }\n')),(0,a.yg)("p",null,"Likewise, there are functions ",(0,a.yg)("inlineCode",{parentName:"p"},"isTraceEnabled()"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"isInfoEnabled()")," etc."),(0,a.yg)("h3",{id:"kotlin-lambda"},"Kotlin lambda"),(0,a.yg)("p",null,"The idiomatic Kotlin way to send a log event that might be expensive is to use a lambda.\nThe lambda is only called if the minimum level check evaluates ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,a.yg)("p",null,"It is simple when logging a string message:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},'    logger.trace { "Starting run with ID=$runId" }\n')),(0,a.yg)("p",null,"Here, a log event is only sent if ",(0,a.yg)("inlineCode",{parentName:"p"},"logger.isTraceEnabled()")," evaluates ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,a.yg)("p",null,"The lambda can only return a single value, so if you want to use a message template, you\ncan call the ",(0,a.yg)("inlineCode",{parentName:"p"},"e()")," function as the return value of the lambda:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},'    logger.debug {\n        val complex = calculateSpecialValueForDebugging()\n        val other = extractOtherValueFromSomewhereElse()\n        e("Calculated {complex} and {other}", complex, other)\n    }\n')),(0,a.yg)("h3",{id:"lambda-and-exception"},"Lambda and exception"),(0,a.yg)("p",null,"Combine a lambda and an exception like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},'    logger.warn(ex) { "Exception processing payment" }\n')))}u.isMDXComponent=!0},7547:(e,n,t)=>{t.d(n,{A:()=>l});const l=t.p+"assets/images/log-info-userId-splunk-7572d963c8f7ea7f0c9a9a037e3ce089.png"}}]);