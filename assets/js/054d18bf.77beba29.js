"use strict";(self.webpackChunkklogging_io=self.webpackChunkklogging_io||[]).push([[2281],{5755:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>g,frontMatter:()=>t,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"concepts/rendering-and-sending","title":"Rendering and sending","description":"Log events are rendered before being sent to sinks.","source":"@site/docs/concepts/rendering-and-sending.md","sourceDirName":"concepts","slug":"/concepts/rendering-and-sending","permalink":"/docs/concepts/rendering-and-sending","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":50,"frontMatter":{"sidebar_position":50},"sidebar":"tutorialSidebar","previous":{"title":"Sinks","permalink":"/docs/concepts/sinks"},"next":{"title":"Direct logging","permalink":"/docs/concepts/direct-logging"}}');var s=r(4848),d=r(8453);const t={sidebar_position:50},o="Rendering and sending",c={},a=[{value:"Rendering",id:"rendering",level:2},{value:"Sending",id:"sending",level:2},{value:"Rendering and sending",id:"rendering-and-sending-1",level:2},{value:"Custom rendering and sending",id:"custom-rendering-and-sending",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"rendering-and-sending",children:"Rendering and sending"})}),"\n",(0,s.jsxs)(n.p,{children:["Log events are ",(0,s.jsx)(n.em,{children:"rendered"})," before being ",(0,s.jsx)(n.em,{children:"sent"})," to ",(0,s.jsx)(n.a,{href:"/docs/concepts/sinks",children:"sinks"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"rendering",children:"Rendering"}),"\n",(0,s.jsxs)(n.p,{children:["The type ",(0,s.jsx)(n.code,{children:"RenderString"})," is implemented to render events into string\nrepresentations of them:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"public interface RenderString {\n    public operator fun invoke(event: LogEvent): String\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"sending",children:"Sending"}),"\n",(0,s.jsxs)(n.p,{children:["The type ",(0,s.jsx)(n.code,{children:"SendString"})," is implemented to send rendered events to a sink somewhere:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"public interface SendString {\n    public operator fun invoke(eventString: String)\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"rendering-and-sending-1",children:"Rendering and sending"}),"\n",(0,s.jsxs)(n.p,{children:["The type ",(0,s.jsx)(n.code,{children:"EventSender"})," is implemented to render a batch of events and send them to a sink:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"public interface EventSender {\n    public operator fun invoke(batch: List<LogEvent>)\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.code,{children:"EventSender"})," can be created from a ",(0,s.jsx)(n.code,{children:"RenderString"})," and a ",(0,s.jsx)(n.code,{children:"SendString"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'public fun senderFrom(renderer: RenderString, sender: SendString): EventSender = object : EventSender {\n    override fun invoke(batch: List<LogEvent>) {\n        sender(batch.joinToString("\\n") { renderer(it) })\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"custom-rendering-and-sending",children:"Custom rendering and sending"}),"\n",(0,s.jsxs)(n.p,{children:["If you need rendering or sending not available using\n",(0,s.jsx)(n.a,{href:"/docs/configuration/built-ins",children:"built-in renderers"}),", you can implement a custom renderer or sender.\nAn example renderer is:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"object MessageOnly : RenderString {\n    override operator fun invoke(event: LogEvent) = event.message\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.a,{href:"/docs/configuration/dsl",children:"DSL configuration"})," you can specify it with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'loggingConfiguration {\n    sink("messages", MessageOnly, STDOUT)\n    // etc.\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["An example ",(0,s.jsx)(n.code,{children:"EventSender"})," might be:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"package mjs.example\n\n// imports here\n\nclass ConsoleSender : EventSender {\n    override fun invoke(batch: List<LogEvent>) {\n        batch.forEach { logEvent ->\n            if (logEvent.level > Level.INFO) {\n                STDERR(RENDER_ANSI(logEvent))\n            } else {\n                STDOUT(RENDER_ANSI(logEvent))\n            }\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.a,{href:"/docs/configuration/hocon",children:"HOCON configuration"})," you can specify it with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hocon",children:'{\n  sinks = {\n    console = {\n      eventSender = "mjs.example.ConsoleSender"\n    }\n  }\n  // etc.\n}\n'})})]})}function g(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>o});var i=r(6540);const s={},d=i.createContext(s);function t(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);