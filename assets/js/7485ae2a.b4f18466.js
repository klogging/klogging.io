"use strict";(self.webpackChunkklogging=self.webpackChunkklogging||[]).push([[852],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var g=o.createContext({}),s=function(e){var n=o.useContext(g),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(g.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,g=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),d=r,m=u["".concat(g,".").concat(d)]||u[d]||c[d]||a;return t?o.createElement(m,i(i({ref:n},p),{},{components:t})):o.createElement(m,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var g in n)hasOwnProperty.call(n,g)&&(l[g]=n[g]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2018:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return g},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var o=t(7462),r=t(3366),a=(t(7294),t(3905)),i=["components"],l={sidebar_position:10},g="Get started",s={unversionedId:"get-started",id:"get-started",title:"Get started",description:"Get started with Klogging quickly here.",source:"@site/docs/get-started.md",sourceDirName:".",slug:"/get-started",permalink:"/docs/get-started",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",next:{title:"Introduction",permalink:"/docs/introduction"}},p={},u=[{value:"Add Klogging to your application",id:"add-klogging-to-your-application",level:2},{value:"Configure Klogging",id:"configure-klogging",level:2},{value:"Create a logger",id:"create-a-logger",level:2},{value:"Emit log events",id:"emit-log-events",level:2},{value:"I didn\u2019t see any logs!",id:"i-didnt-see-any-logs",level:2},{value:"Using snapshot builds",id:"using-snapshot-builds",level:2}],c={toc:u},d="wrapper";function m(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)(d,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"get-started"},"Get started"),(0,a.kt)("p",null,"Get started with Klogging quickly here."),(0,a.kt)("h2",{id:"add-klogging-to-your-application"},"Add Klogging to your application"),(0,a.kt)("p",null,"Gradle: in ",(0,a.kt)("inlineCode",{parentName:"p"},"build.gradle.kts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    implementation("io.klogging:klogging-jvm:0.5.0")\n}\n')),(0,a.kt)("p",null,"Maven: in ",(0,a.kt)("inlineCode",{parentName:"p"},"pom.xml"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"<dependencies>\n  <dependency>\n    <groupId>io.klogging</groupId>\n    <artifactId>klogging-jvm</artifactId>\n    <version>0.5.0</version>\n  </dependency>\n</dependencies>\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"See ",(0,a.kt)("a",{parentName:"p",href:"#using-snapshot-builds"},"Using snapshot builds")," below for using current, unreleased builds\nof Klogger.")),(0,a.kt)("h2",{id:"configure-klogging"},"Configure Klogging"),(0,a.kt)("p",null,"To see logs in your console quickly, using the ",(0,a.kt)("a",{parentName:"p",href:"configuration/dsl"},"configuration DSL"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"loggingConfiguration { DEFAULT_CONSOLE() }\n")),(0,a.kt)("p",null,"Or place the file ",(0,a.kt)("inlineCode",{parentName:"p"},"klogging.json")," in a directory on your application\u2019s classpath to use\n",(0,a.kt)("a",{parentName:"p",href:"configuration/json"},"JSON configuration"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "configName": "DEFAULT_CONSOLE"\n}\n')),(0,a.kt)("h2",{id:"create-a-logger"},"Create a logger"),(0,a.kt)("p",null,"To quickly create a ",(0,a.kt)("inlineCode",{parentName:"p"},"Klogger")," instance to log from ",(0,a.kt)("inlineCode",{parentName:"p"},"suspend")," functions, implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"Klogging"),"\ninterface that defines a ",(0,a.kt)("inlineCode",{parentName:"p"},"logger")," property:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"package com.example\n\nclass ThingDoer : Klogging {\n}\n")),(0,a.kt)("h2",{id:"emit-log-events"},"Emit log events"),(0,a.kt)("p",null,"In your class, emit logs using the ",(0,a.kt)("inlineCode",{parentName:"p"},"logger")," property, in a similar way to many logging frameworks:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'    suspend fun doThing() {\n        logger.info("Doing the thing")\n        // Actually do the thing\n    }\n')),(0,a.kt)("p",null,"You will see a log message on your console like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"2021-08-10 22:29:30.300509 INFO [main] com.example.ThingDoer : Doing the thing\n")),(0,a.kt)("h2",{id:"i-didnt-see-any-logs"},"I didn\u2019t see any logs!"),(0,a.kt)("p",null,"If you try out Klogging in a simple command-line program you might not see all the log messages you\nexpect to see. This example will not show the log message on the console:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'suspend fun main() = coroutineScope {\n    loggingConfiguration { DEFAULT_CONSOLE() }\n    val logger = logger("main")\n    logger.info("Hello, world!")\n}\n')),(0,a.kt)("p",null,"Klogging works asynchronously and the program completes before log events can be\nsent. In this case you can add a coroutine delay or thread sleep before the program completes,\nfor example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'suspend fun main() = coroutineScope {\n    loggingConfiguration { DEFAULT_CONSOLE() }\n    val logger = logger("main")\n    logger.info("Hello, world!")\n    delay(50)\n}\n')),(0,a.kt)("p",null,"Or you can specify that log events with severity above a certain level are sent directly instead of\nvia coroutine channels:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'suspend fun main() = coroutineScope {\n    loggingConfiguration {\n        DEFAULT_CONSOLE()\n        minDirectLogLevel(Level.INFO)\n    }\n    val logger = logger("main")\n    logger.info("Hello, world!")\n}\n')),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"concepts/direct-logging"},"Direct logging")," for more information."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Klogging is designed primarily for long-running services and applications."),(0,a.kt)("p",{parentName:"admonition"},"I don\u2019t know a reliable way to trap application shutdown and ensure all logs are sent before\nshutdown proceeds. ",(0,a.kt)("a",{parentName:"p",href:"mailto:info@klogging.io"},"Let me know if you do"),".")),(0,a.kt)("h2",{id:"using-snapshot-builds"},"Using snapshot builds"),(0,a.kt)("p",null,"If you want to use the latest snapshot builds, specify these in your ",(0,a.kt)("inlineCode",{parentName:"p"},"build.gradle.kts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'repositories {\n    // ...\n    maven {\n        url = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")\n    }\n}\n\ndependencies {\n    // ...\n    implementation("io.klogging:klogging-jvm:0.6.0-SNAPSHOT")\n}\n')))}m.isMDXComponent=!0}}]);