"use strict";(self.webpackChunkklogging=self.webpackChunkklogging||[]).push([[189],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return k}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=i.createContext({}),s=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=s(e.components);return i.createElement(p.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),u=s(t),d=a,k=u["".concat(p,".").concat(d)]||u[d]||c[d]||o;return t?i.createElement(k,l(l({ref:n},m),{},{components:t})):i.createElement(k,l({ref:n},m))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=d;var r={};for(var p in n)hasOwnProperty.call(n,p)&&(r[p]=n[p]);r.originalType=e,r[u]="string"==typeof e?e:a,l[1]=r;for(var s=2;s<o;s++)l[s]=t[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1566:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return r},metadata:function(){return s},toc:function(){return u}});var i=t(7462),a=t(3366),o=(t(7294),t(3905)),l=["components"],r={sidebar_position:20},p="Configuration with JSON",s={unversionedId:"configuration/json",id:"configuration/json",title:"Configuration with JSON",description:"Klogging can be configured from JSON files. This example is exactly equivalent to",source:"@site/docs/configuration/json.md",sourceDirName:"configuration",slug:"/configuration/json",permalink:"/docs/configuration/json",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Configuration DSL",permalink:"/docs/configuration/dsl"},next:{title:"Configuration with HOCON",permalink:"/docs/configuration/hocon"}},m={},u=[{value:"Locating configuration files",id:"locating-configuration-files",level:2},{value:"Configuration object names",id:"configuration-object-names",level:2},{value:"<code>sinks</code>",id:"sinks",level:3},{value:"<code>logging</code>",id:"logging",level:3},{value:"<code>levelRanges</code>",id:"levelranges",level:3},{value:"Other options",id:"other-options",level:3},{value:"<code>kloggingMinLogLevel</code>",id:"kloggingminloglevel",level:4},{value:"<code>minDirectLogLevel</code>",id:"mindirectloglevel",level:4},{value:"<code>baseContext</code>",id:"basecontext",level:4}],c={toc:u},d="wrapper";function k(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)(d,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"configuration-with-json"},"Configuration with JSON"),(0,o.kt)("p",null,"Klogging can be configured from JSON files. This example is exactly equivalent to\nthe ",(0,o.kt)("a",{parentName:"p",href:"dsl#a-simple-example"},"first DSL example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "sinks": {\n    "stdout": {\n      "renderWith": "RENDER_SIMPLE",\n      "sendTo": "STDOUT"\n    },\n    "seq": {\n      "seqServer": "http://localhost:5341"\n    }\n  },\n  "logging": [\n    {\n      "fromLoggerBase": "com.example",\n      "levelRanges": [\n        {\n          "fromMinLevel": "INFO",\n          "toSinks": [\n            "stdout"\n          ]\n        }\n      ]\n    }\n  ]\n}\n')),(0,o.kt)("h2",{id:"locating-configuration-files"},"Locating configuration files"),(0,o.kt)("p",null,"Klogging looks for configuration files as follows:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"If the environment variable ",(0,o.kt)("inlineCode",{parentName:"li"},"KLOGGING_CONFIG_PATH")," exists, load the file at that absolute path if\nit exists."),(0,o.kt)("li",{parentName:"ol"},"Search the classpath for the file ",(0,o.kt)("inlineCode",{parentName:"li"},"klogging.json")," first, and ",(0,o.kt)("inlineCode",{parentName:"li"},"klogging.conf"),".")),(0,o.kt)("p",null,"If a configuration file is found it is read as JSON or HOCON."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"JSON file names must end with ",(0,o.kt)("inlineCode",{parentName:"p"},".json")," and HOCON files must end with ",(0,o.kt)("inlineCode",{parentName:"p"},".conf"),".")),(0,o.kt)("h2",{id:"configuration-object-names"},"Configuration object names"),(0,o.kt)("h3",{id:"sinks"},(0,o.kt)("inlineCode",{parentName:"h3"},"sinks")),(0,o.kt)("p",null,"Equivalent to the ",(0,o.kt)("a",{parentName:"p",href:"dsl#sink"},"sinks")," DSL function. Object keyed by sink name with keys:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"renderWith"),": name of a ",(0,o.kt)("a",{parentName:"p",href:"built-ins#rendering"},"built-in renderer"),". Current values\nare ",(0,o.kt)("inlineCode",{parentName:"p"},"RENDER_SIMPLE"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"RENDER_ISO8601"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"RENDER_ANSI"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"RENDER_CLEF")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"RENDER_GELF"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"sendTo"),": name of a ",(0,o.kt)("a",{parentName:"p",href:"built-ins#sending"},"built-in sender"),". Current values are ",(0,o.kt)("inlineCode",{parentName:"p"},"STDOUT")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"STDERR"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"seqServer"),": URL of a ",(0,o.kt)("a",{parentName:"p",href:"https://datalust.co"},"Seq server")," where events are to be dispatched. By\ndefault, the RENDER_CLEF renderer is used.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"apiKey"),": a Seq API key. It is a secret that should be passed in via an environment variable, for\nexample: ",(0,o.kt)("inlineCode",{parentName:"p"},'"apiKey": "${SEQ_API_KEY}"'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"checkCertificate"),": a boolean value (default ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),") that specifies if the TLS certificate used by\na secure ",(0,o.kt)("inlineCode",{parentName:"p"},"seqServer")," URL should be checked.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"splunkServer"),": connection details for a ",(0,o.kt)("a",{parentName:"p",href:"https://www.splunk.com"},"Splunk HEC endpoint"),":"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"hecUrl")," specifies the URL of the Splunk server\u2019s HEC endpoint. It uses HTTPS by default."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"hecToken")," is the HEC token used by Splunk for these logging events. It is a secret\nthat should be passed in via the execution environment."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"index")," is the Splunk index for the events (optional). If set, it must be a value configured\nin Splunk. If not set, Splunk will use the default index configured for the HEC token."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"sourceType")," is the Splunk ",(0,o.kt)("inlineCode",{parentName:"li"},"sourcetype")," value (optional). If not set, Splunk will use\n",(0,o.kt)("inlineCode",{parentName:"li"},"httpevent")," or a value configured for the HEC token."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"source")," is the Splunk ",(0,o.kt)("inlineCode",{parentName:"li"},"source")," value, typically the name of an application (optional).\nIf not set, Splunk will use a name configured with the HEC token."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"checkCertificate")," indicates whether Klogging should check the TLS certificate used by the\nSplunk server (string: default ",(0,o.kt)("inlineCode",{parentName:"li"},'"true"'),").")))),(0,o.kt)("p",null,"An example of a Splunk sink called ",(0,o.kt)("inlineCode",{parentName:"p"},"splunk")," is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "splunk": {\n    "splunkServer": {\n      "hecUrl": "https://localhost:8088",\n      "hecToken": "${SPLUNK_HEC_TOKEN}",\n      "source": "MyApplication",\n      "checkCertificate": "false"\n    }\n  }\n}\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"You should have only one of ",(0,o.kt)("inlineCode",{parentName:"p"},"splunkServer"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"seqServer")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"sendTo")," in a sink. If\nyou have more than one, ",(0,o.kt)("inlineCode",{parentName:"p"},"splunkServer")," takes precedence over ",(0,o.kt)("inlineCode",{parentName:"p"},"seqServer"),", which takes\nprecedence over ",(0,o.kt)("inlineCode",{parentName:"p"},"sendTo"),".")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"sinks")," object is evolving and there will be more options in the future.")),(0,o.kt)("h3",{id:"logging"},(0,o.kt)("inlineCode",{parentName:"h3"},"logging")),(0,o.kt)("p",null,"Equivalent to the ",(0,o.kt)("a",{parentName:"p",href:"dsl#logging"},"logging")," DSL function. Array of objects, each with optional keys:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"fromLoggerBase"),": base name to match logger names.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"exactLogger"),": exact name of logger to match.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"matchLogger"),": a ",(0,o.kt)("a",{parentName:"p",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/"},"Kotlin regular expression"),"\npattern used to match logger names."))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"You should specify only one of these in a ",(0,o.kt)("inlineCode",{parentName:"p"},"logging")," object. If more are specified,\n",(0,o.kt)("inlineCode",{parentName:"p"},"matchLogger")," takes precedence over ",(0,o.kt)("inlineCode",{parentName:"p"},"exactLogger"),", which takes precedence over\n",(0,o.kt)("inlineCode",{parentName:"p"},"fromLoggerBase"),".")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If you specify no key, all loggers will match. This configuration is the equivalent of the root\nlogger in Log4j or Logback.")),(0,o.kt)("h3",{id:"levelranges"},(0,o.kt)("inlineCode",{parentName:"h3"},"levelRanges")),(0,o.kt)("p",null,"Array of objects, each with keys:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"fromMinLevel"),": Name of the minimum level for log events to be emitted. For example, if the value\nis ",(0,o.kt)("inlineCode",{parentName:"p"},"INFO")," then events at severity ",(0,o.kt)("inlineCode",{parentName:"p"},"INFO"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ERROR")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"FATAL")," will be emitted. Equivalent to\nthe ",(0,o.kt)("a",{parentName:"p",href:"dsl#fromminlevel-tomaxlevel-atlevel-and-inlevelrange"},"fromMinLevel")," DSL function.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"toMaxLevel"),": Name of the maximum level for log events to be emitted. For example, if the value\nis ",(0,o.kt)("inlineCode",{parentName:"p"},"INFO")," then events at severity ",(0,o.kt)("inlineCode",{parentName:"p"},"TRACE"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"DEBUG")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"INFO")," will be emitted. Equivalent to\nthe ",(0,o.kt)("a",{parentName:"p",href:"dsl#fromminlevel-tomaxlevel-atlevel-and-inlevelrange"},"toMaxLevel")," DSL function.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can combine ",(0,o.kt)("inlineCode",{parentName:"p"},"fromMinLevel")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"toMaxLevel")," values to set an inclusive range of levels.\nEquivalent to the ",(0,o.kt)("a",{parentName:"p",href:"dsl#fromminlevel-tomaxlevel-atlevel-and-inlevelrange"},"inLevelRange")," DSL function.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"atLevel"),": Name of the exact level at which log events will be emitted. Equivalent to\nthe ",(0,o.kt)("a",{parentName:"p",href:"dsl#fromminlevel-tomaxlevel-atlevel-and-inlevelrange"},"atLevel")," DSL function.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"toSinks"),": Array of sink names where events will be sent. If it does not match a key of\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"sinks")," object, a  warning is written to the console and the configuration is ignored."))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"You must specify at least one ",(0,o.kt)("inlineCode",{parentName:"p"},"levelRange")," object with at least one matching sink name or no logs\nwill be emitted.")),(0,o.kt)("h3",{id:"other-options"},"Other options"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "kloggingMinLogLevel": "DEBUG",\n  "minDirectLogLevel": "INFO",\n  "baseContext": {\n    "appName": "analysis-service",\n    "buildNumber": "${BUILD_NUMBER}"\n  }\n}\n')),(0,o.kt)("h4",{id:"kloggingminloglevel"},(0,o.kt)("inlineCode",{parentName:"h4"},"kloggingMinLogLevel")),(0,o.kt)("p",null,"Set the minimum level of the ",(0,o.kt)("a",{parentName:"p",href:"../internals/internal-logger"},"Klogging internal logger"),"."),(0,o.kt)("h4",{id:"mindirectloglevel"},(0,o.kt)("inlineCode",{parentName:"h4"},"minDirectLogLevel")),(0,o.kt)("p",null,"Set the minimum level for ",(0,o.kt)("a",{parentName:"p",href:"../concepts/direct-logging"},"sending log events directly to sinks"),"."),(0,o.kt)("h4",{id:"basecontext"},(0,o.kt)("inlineCode",{parentName:"h4"},"baseContext")),(0,o.kt)("p",null,"Specify ",(0,o.kt)("a",{parentName:"p",href:"../context/base-context"},"context items to add to every log event"),"."))}k.isMDXComponent=!0}}]);