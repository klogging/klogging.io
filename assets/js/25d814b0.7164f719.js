"use strict";(self.webpackChunkklogging=self.webpackChunkklogging||[]).push([[985],{5680:(e,n,t)=>{t.d(n,{xA:()=>g,yg:()=>d});var r=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},g=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),p=c(t),y=o,d=p["".concat(s,".").concat(y)]||p[y]||u[y]||i;return t?r.createElement(d,a(a({ref:n},g),{},{components:t})):r.createElement(d,a({ref:n},g))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=y;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},1405:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(8168),o=(t(6540),t(5680));const i={sidebar_position:80},a="Direct logging",l={unversionedId:"concepts/direct-logging",id:"concepts/direct-logging",title:"Direct logging",description:"Klogging handles most log events asynchronously by using Kotlin coroutines. This design takes",source:"@site/docs/concepts/direct-logging.md",sourceDirName:"concepts",slug:"/concepts/direct-logging",permalink:"/docs/concepts/direct-logging",draft:!1,tags:[],version:"current",sidebarPosition:80,frontMatter:{sidebar_position:80},sidebar:"tutorialSidebar",previous:{title:"Rendering and sending",permalink:"/docs/concepts/rendering-and-sending"},next:{title:"Environment variables",permalink:"/docs/internals/environment-variables"}},s={},c=[],g={toc:c},p="wrapper";function u(e){let{components:n,...t}=e;return(0,o.yg)(p,(0,r.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"direct-logging"},"Direct logging"),(0,o.yg)("p",null,"Klogging handles most log events asynchronously by using Kotlin coroutines. This design takes\nlogging away from the main threads of program execution as soon as possible."),(0,o.yg)("p",null,"But asynchronous processing delays the sending of log events to sinks, so they may be lost when the\nprogram finishes. This can be a problem if the log events occur immediately before a program\ncrashes. Those events may contain valuable information about why the crash happened."),(0,o.yg)("p",null,"By default, Klogging sends all events with level ",(0,o.yg)("inlineCode",{parentName:"p"},"WARN")," and above (",(0,o.yg)("inlineCode",{parentName:"p"},"ERROR")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"FATAL"),") directly to\nsinks. The minimum level can be configured using the ",(0,o.yg)("a",{parentName:"p",href:"../configuration/dsl"},"configuration DSL")," or\nin ",(0,o.yg)("a",{parentName:"p",href:"../configuration/json"},"JSON files"),"."),(0,o.yg)("p",null,"In the DSL:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-kotlin"},"loggingConfiguration {\n    minDirectLogLevel(INFO)\n    // Other configuration\n}\n")),(0,o.yg)("p",null,"In JSON:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "minDirectLogLevel": "INFO"\n}\n')),(0,o.yg)("p",null,"The level can also be set using the ",(0,o.yg)("a",{parentName:"p",href:"../internals/environment-variables"},"environment\nvariable")," ",(0,o.yg)("inlineCode",{parentName:"p"},"KLOGGING_MIN_DIRECT_LOG_LEVEL"),"."))}u.isMDXComponent=!0}}]);