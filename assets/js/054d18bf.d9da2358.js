"use strict";(self.webpackChunkklogging=self.webpackChunkklogging||[]).push([[874],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),l=p(t),g=i,f=l["".concat(c,".").concat(g)]||l[g]||u[g]||o;return t?r.createElement(f,a(a({ref:n},s),{},{components:t})):r.createElement(f,a({ref:n},s))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=g;var d={};for(var c in n)hasOwnProperty.call(n,c)&&(d[c]=n[c]);d.originalType=e,d[l]="string"==typeof e?e:i,a[1]=d;for(var p=2;p<o;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},4552:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return d},metadata:function(){return p},toc:function(){return l}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],d={sidebar_position:50},c="Rendering and sending",p={unversionedId:"concepts/rendering-and-sending",id:"concepts/rendering-and-sending",title:"Rendering and sending",description:"Log events are rendered before being sent to sinks.",source:"@site/docs/concepts/rendering-and-sending.md",sourceDirName:"concepts",slug:"/concepts/rendering-and-sending",permalink:"/docs/concepts/rendering-and-sending",draft:!1,tags:[],version:"current",sidebarPosition:50,frontMatter:{sidebar_position:50},sidebar:"tutorialSidebar",previous:{title:"Sinks",permalink:"/docs/concepts/sinks"},next:{title:"Direct logging",permalink:"/docs/concepts/direct-logging"}},s={},l=[{value:"Rendering",id:"rendering",level:2},{value:"Sending",id:"sending",level:2},{value:"Rendering and sending",id:"rendering-and-sending-1",level:2}],u={toc:l},g="wrapper";function f(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)(g,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"rendering-and-sending"},"Rendering and sending"),(0,o.kt)("p",null,"Log events are ",(0,o.kt)("em",{parentName:"p"},"rendered")," before being ",(0,o.kt)("em",{parentName:"p"},"sent")," to ",(0,o.kt)("a",{parentName:"p",href:"sinks"},"sinks"),"."),(0,o.kt)("h2",{id:"rendering"},"Rendering"),(0,o.kt)("p",null,"The type ",(0,o.kt)("inlineCode",{parentName:"p"},"RenderString")," is implemented to render events into string\nrepresentations of them:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"public interface RenderString {\n    public operator fun invoke(event: LogEvent): String\n}\n")),(0,o.kt)("h2",{id:"sending"},"Sending"),(0,o.kt)("p",null,"The type ",(0,o.kt)("inlineCode",{parentName:"p"},"SendString")," is implemented to send rendered events to a sink somewhere:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"public interface SendString {\n    public operator fun invoke(eventString: String)\n}\n")),(0,o.kt)("h2",{id:"rendering-and-sending-1"},"Rendering and sending"),(0,o.kt)("p",null,"The type ",(0,o.kt)("inlineCode",{parentName:"p"},"EventSender")," is implemented to render a batch of events and send them to a sink:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"public interface EventSender {\n    public operator fun invoke(batch: List<LogEvent>)\n}\n")),(0,o.kt)("p",null,"An ",(0,o.kt)("inlineCode",{parentName:"p"},"EventSender")," can be created from a ",(0,o.kt)("inlineCode",{parentName:"p"},"RenderString")," and a ",(0,o.kt)("inlineCode",{parentName:"p"},"SendString"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'public fun senderFrom(renderer: RenderString, sender: SendString): EventSender = object : EventSender {\n    override fun invoke(batch: List<LogEvent>) {\n        sender(batch.joinToString("\\n") { renderer(it) })\n    }\n}\n')))}f.isMDXComponent=!0}}]);