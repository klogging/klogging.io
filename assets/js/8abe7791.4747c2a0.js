"use strict";(self.webpackChunkklogging=self.webpackChunkklogging||[]).push([[2901],{2941:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>f,frontMatter:()=>r,metadata:()=>s,toc:()=>a});var i=t(4848),o=t(5680);const r={},l="Configuration",s={id:"configuration/configuration",title:"Configuration",description:"Klogging starts with no configuration and will not send any log events. You configure Klogging using",source:"@site/docs/configuration/configuration.md",sourceDirName:"configuration",slug:"/configuration/",permalink:"/docs/configuration/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Structured log events",permalink:"/docs/structured-log-events"},next:{title:"Configuration DSL",permalink:"/docs/configuration/dsl"}},c={},a=[{value:"How Klogging loads configuration",id:"how-klogging-loads-configuration",level:2},{value:"How Klogging finds configuration files",id:"how-klogging-finds-configuration-files",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.RP)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Klogging starts with no configuration and will not send any log events. You configure Klogging using\neither:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["in code using the ",(0,i.jsx)(n.a,{href:"/docs/configuration/dsl",children:"Configuration domain-specific language"})]}),"\n",(0,i.jsxs)(n.li,{children:["using from a ",(0,i.jsx)(n.a,{href:"/docs/configuration/json",children:"JSON"})," or ",(0,i.jsx)(n.a,{href:"/docs/configuration/hocon",children:"HOCON"})," configuration file."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["You can also override some configuration by setting ",(0,i.jsx)(n.a,{href:"../internals/environment-variables.md",children:"Environment\nvariables"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"how-klogging-loads-configuration",children:"How Klogging loads configuration"}),"\n",(0,i.jsx)(n.p,{children:"Klogging first searches for file-based configuration, when it is first needed. The patterns are:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Source"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Configuration"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"File only"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Read from file when the first logger is declared."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"DSL only"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Set when the DSL code is executed."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"File and DSL"}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["Read from file immediately before the DSL code is read. DSL configuration replaces file configuration unless it begins with ",(0,i.jsx)(n.code,{children:"loggingConfiguration(append = true)"}),"."]})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"how-klogging-finds-configuration-files",children:"How Klogging finds configuration files"}),"\n",(0,i.jsx)(n.p,{children:"Klogging follows these steps for finding configuration files:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["If the ",(0,i.jsx)(n.a,{href:"/docs/internals/environment-variables",children:"environment variable"})," ",(0,i.jsx)(n.code,{children:"KLOGGING_CONFIG_PATH"})," is\nset, look for a file at that absolute path. Load the contents if found."]}),"\n",(0,i.jsxs)(n.li,{children:["If the environment variable is not set or the specified file is not found, search the classpath:\nfor ",(0,i.jsx)(n.code,{children:"klogging.json"})," and load the contents if found; otherwise for ",(0,i.jsx)(n.code,{children:"klogging.conf"})," and load the\ncontents if found."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Once a JSON or HOCON file has been found, it is read."})]})}function f(e={}){const{wrapper:n}={...(0,o.RP)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},5680:(e,n,t)=>{t.d(n,{RP:()=>a});var i=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=i.createContext({}),a=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,f=s(e,["components","mdxType","originalType","parentName"]),g=a(t),u=o,h=g["".concat(c,".").concat(u)]||g[u]||d[u]||r;return t?i.createElement(h,l(l({ref:n},f),{},{components:t})):i.createElement(h,l({ref:n},f))}));f.displayName="MDXCreateElement"}}]);