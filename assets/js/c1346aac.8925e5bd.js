"use strict";(self.webpackChunkklogging_io=self.webpackChunkklogging_io||[]).push([[5125],{3888:(t,e,o)=>{o.r(e),o.d(e,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"context/other-coroutine-context","title":"From other coroutine contexts","description":"Klogging can include information from other coroutine context elements.","source":"@site/docs/context/other-coroutine-context.md","sourceDirName":"context","slug":"/context/other-coroutine-context","permalink":"/docs/context/other-coroutine-context","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"sidebar_position":30},"sidebar":"tutorialSidebar","previous":{"title":"Items put into coroutine context","permalink":"/docs/context/coroutine-context-items"},"next":{"title":"From other sources","permalink":"/docs/context/other-context"}}');var r=o(4848),c=o(8453);const i={sidebar_position:30},a="From other coroutine contexts",s={},l=[];function x(t){const e={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,c.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"from-other-coroutine-contexts",children:"From other coroutine contexts"})}),"\n",(0,r.jsx)(e.p,{children:"Klogging can include information from other coroutine context elements."}),"\n",(0,r.jsxs)(e.p,{children:["As an example, if your application is using ",(0,r.jsx)(e.a,{href:"https://projectreactor.io/",children:"Project Reactor"}),", you can\nstore information in a Reactor context and wrap that in a coroutine ",(0,r.jsx)(e.code,{children:"ReactorContext"}),". This example\nSpring configuration copies selected items from ",(0,r.jsx)(e.code,{children:"ReactorContext"})," into the Klogging context,\nso they are included in log events:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-kotlin",children:'package com.example.config\n\nimport io.klogging.context.Context\nimport io.klogging.events.EventItems\nimport kotlinx.coroutines.reactor.ReactorContext\nimport org.springframework.context.annotation.Configuration\n\nconst val correlationKey = "correlationId"\nconst val tracingKey = "tracingId"\nconst val spanKey = "spanId"\n\n@Configuration\nclass CopyReactorToKloggingContext {\n    init {\n        val copyContextItems: (ReactorContext) -> EventItems = { reactorContext ->\n            buildMap {\n                listOf(correlationKey, tracingKey, spanKey).forEach { key ->\n                    if (reactorContext.context.hasKey(key))\n                        put(key, reactorContext.context[key])\n                }\n            }\n        }\n        Context.addContextItemExtractor(ReactorContext, copyContextItems)\n    }\n}\n'})})]})}function u(t={}){const{wrapper:e}={...(0,c.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(x,{...t})}):x(t)}},8453:(t,e,o)=>{o.d(e,{R:()=>i,x:()=>a});var n=o(6540);const r={},c=n.createContext(r);function i(t){const e=n.useContext(c);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:i(t.components),n.createElement(c.Provider,{value:e},t.children)}}}]);