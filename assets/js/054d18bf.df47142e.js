"use strict";(self.webpackChunkklogging=self.webpackChunkklogging||[]).push([[874],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=r.createContext({}),s=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(d.Provider,{value:n},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(t),u=i,m=p["".concat(d,".").concat(u)]||p[u]||g[u]||a;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4552:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],l={sidebar_position:50},d="Rendering and sending",s={unversionedId:"concepts/rendering-and-sending",id:"concepts/rendering-and-sending",title:"Rendering and sending",description:"Log events are rendered before being sent to sinks.",source:"@site/docs/concepts/rendering-and-sending.md",sourceDirName:"concepts",slug:"/concepts/rendering-and-sending",permalink:"/docs/concepts/rendering-and-sending",draft:!1,tags:[],version:"current",sidebarPosition:50,frontMatter:{sidebar_position:50},sidebar:"tutorialSidebar",previous:{title:"Sinks",permalink:"/docs/concepts/sinks"},next:{title:"Direct logging",permalink:"/docs/concepts/direct-logging"}},c={},p=[{value:"Rendering",id:"rendering",level:2},{value:"Sending",id:"sending",level:2},{value:"Rendering and sending",id:"rendering-and-sending-1",level:2},{value:"Custom rendering and sending",id:"custom-rendering-and-sending",level:2}],g={toc:p},u="wrapper";function m(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)(u,(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"rendering-and-sending"},"Rendering and sending"),(0,a.kt)("p",null,"Log events are ",(0,a.kt)("em",{parentName:"p"},"rendered")," before being ",(0,a.kt)("em",{parentName:"p"},"sent")," to ",(0,a.kt)("a",{parentName:"p",href:"sinks"},"sinks"),"."),(0,a.kt)("h2",{id:"rendering"},"Rendering"),(0,a.kt)("p",null,"The type ",(0,a.kt)("inlineCode",{parentName:"p"},"RenderString")," is implemented to render events into string\nrepresentations of them:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"public interface RenderString {\n    public operator fun invoke(event: LogEvent): String\n}\n")),(0,a.kt)("h2",{id:"sending"},"Sending"),(0,a.kt)("p",null,"The type ",(0,a.kt)("inlineCode",{parentName:"p"},"SendString")," is implemented to send rendered events to a sink somewhere:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"public interface SendString {\n    public operator fun invoke(eventString: String)\n}\n")),(0,a.kt)("h2",{id:"rendering-and-sending-1"},"Rendering and sending"),(0,a.kt)("p",null,"The type ",(0,a.kt)("inlineCode",{parentName:"p"},"EventSender")," is implemented to render a batch of events and send them to a sink:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"public interface EventSender {\n    public operator fun invoke(batch: List<LogEvent>)\n}\n")),(0,a.kt)("p",null,"An ",(0,a.kt)("inlineCode",{parentName:"p"},"EventSender")," can be created from a ",(0,a.kt)("inlineCode",{parentName:"p"},"RenderString")," and a ",(0,a.kt)("inlineCode",{parentName:"p"},"SendString"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'public fun senderFrom(renderer: RenderString, sender: SendString): EventSender = object : EventSender {\n    override fun invoke(batch: List<LogEvent>) {\n        sender(batch.joinToString("\\n") { renderer(it) })\n    }\n}\n')),(0,a.kt)("h2",{id:"custom-rendering-and-sending"},"Custom rendering and sending"),(0,a.kt)("p",null,"If you need rendering or sending not available using\n",(0,a.kt)("a",{parentName:"p",href:"../configuration/built-ins"},"built-in renderers"),", you can implement a custom renderer or sender.\nAn example renderer is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"object MessageOnly : RenderString {\n    override operator fun invoke(event: LogEvent) = event.message\n}\n")),(0,a.kt)("p",null,"In ",(0,a.kt)("a",{parentName:"p",href:"../configuration/dsl"},"DSL configuration")," you can specify it with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'loggingConfiguration {\n    sink("messages", MessageOnly, STDOUT)\n    // etc.\n}\n')),(0,a.kt)("p",null,"An example ",(0,a.kt)("inlineCode",{parentName:"p"},"EventSender")," might be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"package mjs.example\n\n// imports here\n\nclass ConsoleSender : EventSender {\n    override fun invoke(batch: List<LogEvent>) {\n        batch.forEach { logEvent ->\n            if (logEvent.level > Level.INFO) {\n                STDERR(RENDER_ANSI(logEvent))\n            } else {\n                STDOUT(RENDER_ANSI(logEvent))\n            }\n        }\n    }\n}\n")),(0,a.kt)("p",null,"In ",(0,a.kt)("a",{parentName:"p",href:"../configuration/hocon"},"HOCON configuration")," you can specify it with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hocon"},'{\n  sinks = {\n    console = {\n      eventSender = "mjs.example.ConsoleSender"\n    }\n  }\n  // etc.\n}\n')))}m.isMDXComponent=!0}}]);