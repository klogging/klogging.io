"use strict";(self.webpackChunkklogging=self.webpackChunkklogging||[]).push([[189],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return k}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=s(t),d=i,k=u["".concat(p,".").concat(d)]||u[d]||c[d]||o;return t?a.createElement(k,r(r({ref:n},m),{},{components:t})):a.createElement(k,r({ref:n},m))}));function k(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1566:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var a=t(7462),i=t(3366),o=(t(7294),t(3905)),r=["components"],l={sidebar_position:20},p="Configuration with JSON",s={unversionedId:"configuration/json",id:"configuration/json",title:"Configuration with JSON",description:"Klogging can be configured from JSON files. This example is exactly equivalent to",source:"@site/docs/configuration/json.md",sourceDirName:"configuration",slug:"/configuration/json",permalink:"/docs/configuration/json",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Configuration DSL",permalink:"/docs/configuration/dsl"},next:{title:"Configuration with HOCON",permalink:"/docs/configuration/hocon"}},m={},u=[{value:"Locating configuration files",id:"locating-configuration-files",level:2},{value:"Configuration object names",id:"configuration-object-names",level:2},{value:"<code>sinks</code>",id:"sinks",level:3},{value:"<code>logging</code>",id:"logging",level:3},{value:"<code>levelRanges</code>",id:"levelranges",level:3}],c={toc:u},d="wrapper";function k(e){var n=e.components,t=(0,i.Z)(e,r);return(0,o.kt)(d,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"configuration-with-json"},"Configuration with JSON"),(0,o.kt)("p",null,"Klogging can be configured from JSON files. This example is exactly equivalent to\nthe ",(0,o.kt)("a",{parentName:"p",href:"dsl#a-simple-example"},"first DSL example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "sinks": {\n    "stdout": {\n      "renderWith": "RENDER_SIMPLE",\n      "sendTo": "STDOUT"\n    },\n    "seq": {\n      "seqServer": "http://localhost:5341"\n    }\n  },\n  "logging": [\n    {\n      "fromLoggerBase": "com.example",\n      "levelRanges": [\n        {\n          "fromMinLevel": "INFO",\n          "toSinks": ["stdout"]\n        }\n      ]\n    }\n  ]\n}\n')),(0,o.kt)("h2",{id:"locating-configuration-files"},"Locating configuration files"),(0,o.kt)("p",null,"Klogging looks for configuration files as follows:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"If the environment variable ",(0,o.kt)("inlineCode",{parentName:"li"},"KLOGGING_CONFIG_PATH")," exists, load the file at that absolute path if\nit exists."),(0,o.kt)("li",{parentName:"ol"},"Search the classpath for the file ",(0,o.kt)("inlineCode",{parentName:"li"},"klogging.json")," first, and ",(0,o.kt)("inlineCode",{parentName:"li"},"klogging.conf"),".")),(0,o.kt)("p",null,"If a configuration file is found it is read as JSON or HOCON."),(0,o.kt)("h2",{id:"configuration-object-names"},"Configuration object names"),(0,o.kt)("h3",{id:"sinks"},(0,o.kt)("inlineCode",{parentName:"h3"},"sinks")),(0,o.kt)("p",null,"Equivalent to the ",(0,o.kt)("a",{parentName:"p",href:"dsl#sink"},"sinks")," DSL function. Object keyed by sink name with keys:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"renderWith"),": name of a ",(0,o.kt)("a",{parentName:"p",href:"built-ins#rendering"},"built-in renderer"),". Current values are ",(0,o.kt)("inlineCode",{parentName:"p"},"RENDER_SIMPLE"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"RENDER_ISO8601"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"RENDER_ANSI"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"RENDER_CLEF")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"RENDER_GELF"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"sendTo"),": name of a ",(0,o.kt)("a",{parentName:"p",href:"built-ins#sending"},"built-in sender"),". Current values are ",(0,o.kt)("inlineCode",{parentName:"p"},"STDOUT")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"STDERR"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"seqServer"),": URL of a ",(0,o.kt)("a",{parentName:"p",href:"https://datalust.co"},"Seq server")," where events are to be dispatched. By default,\nthe RENDER_CLEF renderer is used.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"splunkServer"),": connection details for a ",(0,o.kt)("a",{parentName:"p",href:"https://www.splunk.com"},"Splunk server"),":"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"hecUrl"),": URL of the Splunk server\u2019s HEC endpoint (HTTPS by default)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"hecToken"),": the HEC token used by Splunk for these logging events. It is a secret\nthat should be passed in via an environment variable."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"index")," is the Splunk index for the events set up by a Splunk administrator (default ",(0,o.kt)("inlineCode",{parentName:"li"},"main"),")."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"sourceType")," is the Splunk ",(0,o.kt)("inlineCode",{parentName:"li"},"sourcetype")," value (default ",(0,o.kt)("inlineCode",{parentName:"li"},"klogging"),")."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"checkCertificate")," indicates whether Klogging should check the TLS certificate used by the\nSplunk server (string: default ",(0,o.kt)("inlineCode",{parentName:"li"},"true"),").")))),(0,o.kt)("p",null,"An example of a Splunk sink called ",(0,o.kt)("inlineCode",{parentName:"p"},"splunk")," is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "splunk": {\n    "splunkServer": {\n      "hecUrl": "https://localhost:8088",\n      "hecToken": "${SPLUNK_HEC_TOKEN}",\n      "index": "main",\n      "sourceType": "klogging",\n      "checkCertificate": "false"\n    }\n  }\n}\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"You should have only one of ",(0,o.kt)("inlineCode",{parentName:"p"},"splunkServer"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"seqServer")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"sendTo")," in a sink. If\nyou have more than one, ",(0,o.kt)("inlineCode",{parentName:"p"},"splunkServer")," takes precedence over ",(0,o.kt)("inlineCode",{parentName:"p"},"seqServer"),", which takes\nprecedence over ",(0,o.kt)("inlineCode",{parentName:"p"},"sendTo"),".")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"sinks")," object is evolving and there will be more options in the future.")),(0,o.kt)("h3",{id:"logging"},(0,o.kt)("inlineCode",{parentName:"h3"},"logging")),(0,o.kt)("p",null,"Equivalent to the ",(0,o.kt)("a",{parentName:"p",href:"dsl#logging"},"logging")," DSL function. Array of objects, each with optional keys:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"fromLoggerBase"),": base name to match logger names.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"exactLogger"),": exact name of logger to match.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"matchLogger"),": a ",(0,o.kt)("a",{parentName:"p",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/"},"Kotlin regular expression"),"\npattern used to match logger names."))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"You should specify only one of these in a ",(0,o.kt)("inlineCode",{parentName:"p"},"logging")," object. If more are specified,\n",(0,o.kt)("inlineCode",{parentName:"p"},"matchLogger")," takes precedence over ",(0,o.kt)("inlineCode",{parentName:"p"},"exactLogger"),", which takes precedence over\n",(0,o.kt)("inlineCode",{parentName:"p"},"fromLoggerBase"),".")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If you specify no key, all loggers will match. This configuration is the equivalent of the root logger in\nLog4j or Logback.")),(0,o.kt)("h3",{id:"levelranges"},(0,o.kt)("inlineCode",{parentName:"h3"},"levelRanges")),(0,o.kt)("p",null,"Array of objects, each with keys:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"fromMinLevel"),": Name of the minimum level for log events to be emitted. For example, if the value\nis ",(0,o.kt)("inlineCode",{parentName:"p"},"INFO")," then events at severity ",(0,o.kt)("inlineCode",{parentName:"p"},"INFO"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ERROR")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"FATAL")," will be emitted. Equivalent to\nthe ",(0,o.kt)("a",{parentName:"p",href:"dsl#fromminlevel-tomaxlevel-atlevel-and-inlevelrange"},"fromMinLevel")," DSL function.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"toMaxLevel"),": Name of the maximum level for log events to be emitted. For example, if the value\nis ",(0,o.kt)("inlineCode",{parentName:"p"},"INFO")," then events at severity ",(0,o.kt)("inlineCode",{parentName:"p"},"TRACE"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"DEBUG")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"INFO")," will be emitted. Equivalent to\nthe ",(0,o.kt)("a",{parentName:"p",href:"dsl#fromminlevel-tomaxlevel-atlevel-and-inlevelrange"},"toMaxLevel")," DSL function.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can combine ",(0,o.kt)("inlineCode",{parentName:"p"},"fromMinLevel")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"toMaxLevel")," values to set an inclusive range of levels.\nEquivalent to the ",(0,o.kt)("a",{parentName:"p",href:"dsl#fromminlevel-tomaxlevel-atlevel-and-inlevelrange"},"inLevelRange")," DSL function.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"atLevel"),": Name of the exact level at which log events will be emitted. Equivalent to\nthe ",(0,o.kt)("a",{parentName:"p",href:"dsl#fromminlevel-tomaxlevel-atlevel-and-inlevelrange"},"atLevel")," DSL function.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"toSinks"),": Array of sink names where events will be sent. If it does not match a key of the ",(0,o.kt)("inlineCode",{parentName:"p"},"sinks")," object, a\nwarning is written to the console and the configuration is ignored."))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"You must specify at least one ",(0,o.kt)("inlineCode",{parentName:"p"},"levelRange")," object with at least one matching sink name or no logs will be\nemitted.")))}k.isMDXComponent=!0}}]);