"use strict";(self.webpackChunkklogging=self.webpackChunkklogging||[]).push([[660],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var g=r.createContext({}),s=function(e){var t=r.useContext(g),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(g.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,g=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=s(n),m=l,d=p["".concat(g,".").concat(m)]||p[m]||c[m]||a;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,i=new Array(a);i[0]=m;var o={};for(var g in t)hasOwnProperty.call(t,g)&&(o[g]=t[g]);o.originalType=e,o[p]="string"==typeof e?e:l,i[1]=o;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},722:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return g},default:function(){return d},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p}});var r=n(7462),l=n(3366),a=(n(7294),n(3905)),i=["components"],o={sidebar_position:30},g="Internal logger",s={unversionedId:"internals/internal-logger",id:"internals/internal-logger",title:"Internal logger",description:"Klogging has an internal logger that emits string messages to the console. Its purpose is for",source:"@site/docs/internals/internal-logger.md",sourceDirName:"internals",slug:"/internals/internal-logger",permalink:"/docs/internals/internal-logger",draft:!1,tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30},sidebar:"tutorialSidebar",previous:{title:"Log levels and checking",permalink:"/docs/internals/level-checking"}},u={},p=[{value:"Usage",id:"usage",level:2},{value:"Minimum logging level",id:"minimum-logging-level",level:2},{value:"Logging output",id:"logging-output",level:2}],c={toc:p},m="wrapper";function d(e){var t=e.components,n=(0,l.Z)(e,i);return(0,a.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"internal-logger"},"Internal logger"),(0,a.kt)("p",null,"Klogging has an internal logger that emits string messages to the console. Its purpose is for\ndiagnostics on Klogging itself."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Klogging uses its internal logger in these ways:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Level"),(0,a.kt)("th",{parentName:"tr",align:null},"Typical use"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TRACE"),(0,a.kt)("td",{parentName:"tr",align:null},"Detailed tracing of log events through Klogging")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"DEBUG"),(0,a.kt)("td",{parentName:"tr",align:null},"Lifecycle events of Klogging components")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"INFO"),(0,a.kt)("td",{parentName:"tr",align:null},"Klogging has read configuration from DSL or file")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"WARN"),(0,a.kt)("td",{parentName:"tr",align:null},"There was an error interpreting some configuration")))),(0,a.kt)("h2",{id:"minimum-logging-level"},"Minimum logging level"),(0,a.kt)("p",null,"The internal logger has a minimum level from which it will emit log messages, set by\nthe \u2018global\u2019 variable ",(0,a.kt)("inlineCode",{parentName:"p"},"kloggingMinLogLevel"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The level is ",(0,a.kt)("inlineCode",{parentName:"p"},"INFO")," by default.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"It can be changed by the ",(0,a.kt)("a",{parentName:"p",href:"../internals/environment-variables"},"environment variable"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"KLOGGING_MIN_LOG_LEVEL")))),(0,a.kt)("h2",{id:"logging-output"},"Logging output"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/klogging/klogging/blob/main/klogging/src/commonMain/kotlin/io/klogging/internal/InternalLogging.kt"},"The code"),"\nconstructs log events, renders them as string messages using a specific renderer and sends\nthem to the console."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If the logging level is ",(0,a.kt)("inlineCode",{parentName:"li"},"INFO")," or lower, they are sent to the standard output stream."),(0,a.kt)("li",{parentName:"ul"},"If the logging level is ",(0,a.kt)("inlineCode",{parentName:"li"},"WARN")," or higher, they are sent to the standard error stream.\nSome shells will show these messages in a different colour (e.g. red).")))}d.isMDXComponent=!0}}]);