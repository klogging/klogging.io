"use strict";(self.webpackChunkklogging_io=self.webpackChunkklogging_io||[]).push([[5542],{582:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>a});var o=n(4848),s=n(8453);const r={sidebar_position:15},i="Logger context items",c={id:"context/logger-context-items",title:"Logger context items",description:"You can add context items to loggers, that will be included in every log event emitted by them.",source:"@site/docs/context/logger-context-items.md",sourceDirName:"context",slug:"/context/logger-context-items",permalink:"/docs/context/logger-context-items",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"Base Context",permalink:"/docs/context/base-context"},next:{title:"Items put into coroutine context",permalink:"/docs/context/coroutine-context-items"}},g={},a=[{value:"Defining logger context items",id:"defining-logger-context-items",level:2},{value:"Copying context items from other loggers",id:"copying-context-items-from-other-loggers",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"logger-context-items",children:"Logger context items"}),"\n",(0,o.jsxs)(t.p,{children:["You can add context items to loggers, that will be included in every log event emitted by them.\nContext items can be added to both ",(0,o.jsx)(t.code,{children:"Klogger"})," and ",(0,o.jsx)(t.code,{children:"NoCoLogger"})," instances."]}),"\n",(0,o.jsx)(t.p,{children:"This can be useful for passing coroutine context information into non-coroutine code."}),"\n",(0,o.jsx)(t.h2,{id:"defining-logger-context-items",children:"Defining logger context items"}),"\n",(0,o.jsx)(t.p,{children:"When creating a logger, you can pass one or more context items as pairs."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-kotlin",children:'class MainService(processState: String) {\n    private val logger = noCoLogger<MainService>("processState" to processState)\n\n    fun process() {\n        // Emitted log events include processState\n        logger.info("start process()")\n        // do stuff\n    }\n}\n'})}),"\n",(0,o.jsx)(t.h2,{id:"copying-context-items-from-other-loggers",children:"Copying context items from other loggers"}),"\n",(0,o.jsx)(t.p,{children:"You can copy context items from one logger to another."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-kotlin",children:'class MainService(processState: String) {\n    private val logger = logger<MainService>("processState" to processState)\n\n    suspend fun process() {\n        // Emitted log events include processState\n        logger.info("start process()")\n        val subprocessState = doStuff()\n        val subService = SubService(subprocessState, logger)\n        subService.process()\n    }\n}\n\nclass SubService(subprocessState: String, parentLogger: BaseLogger) {\n    private val logger = noCoLogger<SubService>(parentLogger, "subprocessState" to subprocessState)\n\n    fun process() {\n        // Emitted log events include processState and subprocessStatue\n        logger.info("start process()")\n        // do stuff\n    }\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var o=n(6540);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);