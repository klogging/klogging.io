"use strict";(self.webpackChunkklogging=self.webpackChunkklogging||[]).push([[136],{5680:(e,n,r)=>{r.d(n,{xA:()=>c,yg:()=>d});var t=r(6540);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function g(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),p=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},c=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},s="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=g(e,["components","mdxType","originalType","parentName"]),s=p(r),m=o,d=s["".concat(l,".").concat(m)]||s[m]||y[m]||i;return r?t.createElement(d,a(a({ref:n},c),{},{components:r})):t.createElement(d,a({ref:n},c))}));function d(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var g={};for(var l in n)hasOwnProperty.call(n,l)&&(g[l]=n[l]);g.originalType=e,g[s]="string"==typeof e?e:o,a[1]=g;for(var p=2;p<i;p++)a[p]=r[p];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5506:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>y,frontMatter:()=>i,metadata:()=>g,toc:()=>p});var t=r(8168),o=(r(6540),r(5680));const i={sidebar_position:10},a="Defining loggers",g={unversionedId:"loggers/defining-loggers",id:"loggers/defining-loggers",title:"Defining loggers",description:"Klogging provides a number of ways of defining loggers.",source:"@site/docs/loggers/defining-loggers.md",sourceDirName:"loggers",slug:"/loggers/defining-loggers",permalink:"/docs/loggers/defining-loggers",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"From other sources",permalink:"/docs/context/other-context"},next:{title:"Sending log events",permalink:"/docs/logging/sending-logs"}},l={},p=[{value:"Implement <code>Klogging</code> interface",id:"implement-klogging-interface",level:2},{value:"Define a logger directly",id:"define-a-logger-directly",level:2},{value:"Static reference",id:"static-reference",level:2}],c={toc:p},s="wrapper";function y(e){let{components:n,...r}=e;return(0,o.yg)(s,(0,t.A)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"defining-loggers"},"Defining loggers"),(0,o.yg)("p",null,"Klogging provides a number of ways of defining loggers."),(0,o.yg)("h2",{id:"implement-klogging-interface"},"Implement ",(0,o.yg)("inlineCode",{parentName:"h2"},"Klogging")," interface"),(0,o.yg)("p",null,"The interface ",(0,o.yg)("inlineCode",{parentName:"p"},"io.klogging.Klogging")," includes a ",(0,o.yg)("inlineCode",{parentName:"p"},"logger")," property that returns a\n",(0,o.yg)("inlineCode",{parentName:"p"},"Klogger")," instance with the name of the class. For example:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-kotlin"},'package com.example\n\nimport io.klogging.Klogging\n\nclass ImportantService : Klogging {\n\n    suspend fun beImportant() {\n        // This logger has the name "com.example.ImportantService".\n        logger.info("Being important")\n    }\n}\n')),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},"The ",(0,o.yg)("inlineCode",{parentName:"p"},"Klogging")," functions are all ",(0,o.yg)("inlineCode",{parentName:"p"},"suspend")," functions to be called in coroutine contexts.")),(0,o.yg)("p",null,"Similarly, for non-coroutine contexts, the ",(0,o.yg)("inlineCode",{parentName:"p"},"NoCoLogging")," interface has a ",(0,o.yg)("inlineCode",{parentName:"p"},"logger")," property that\nreturns a ",(0,o.yg)("inlineCode",{parentName:"p"},"NoCoLogger")," instance. ",(0,o.yg)("inlineCode",{parentName:"p"},"NoCoLogger")," has the same functions as ",(0,o.yg)("inlineCode",{parentName:"p"},"Klogger")," but they are\nnot ",(0,o.yg)("inlineCode",{parentName:"p"},"suspend")," functions."),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},"The ",(0,o.yg)("inlineCode",{parentName:"p"},"logger")," property is not static and its ",(0,o.yg)("inlineCode",{parentName:"p"},"get()")," function is called every time it is\nreferenced. You can define a logger directly if performance is important.")),(0,o.yg)("h2",{id:"define-a-logger-directly"},"Define a logger directly"),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"logger()")," function defines a logger directly by name, by class or by reified type.\nThe following calls to ",(0,o.yg)("inlineCode",{parentName:"p"},"logger")," are equivalent:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-kotlin"},'package com.example\n\nimport io.klogging.logger\n\nclass BusyService {\n    val loggerByReifiedType = logger<BusyService>()\n    val loggerByClass = logger(BusyService::class)\n    val loggerByName = logger("com.example.BusyService")\n}\n')),(0,o.yg)("p",null,"All three ",(0,o.yg)("inlineCode",{parentName:"p"},"loggerByReifiedType"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"loggerByClass")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"loggerByName")," refer to the same logger\ninstance because they have the same name"),(0,o.yg)("h2",{id:"static-reference"},"Static reference"),(0,o.yg)("p",null,"For a single reference to a logger that is not looked up every time, define it in the companion\nobject of a class:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-kotlin"},"class VeryBusyService {\n    companion object {\n        logger = logger<VeryBusyService>()\n    }\n}\n")))}y.isMDXComponent=!0}}]);