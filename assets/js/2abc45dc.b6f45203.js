"use strict";(self.webpackChunkklogging=self.webpackChunkklogging||[]).push([[567],{5680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>u});var a=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),g=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=g(e.components);return a.createElement(p.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),m=g(t),c=i,u=m["".concat(p,".").concat(c)]||m[c]||d[c]||l;return t?a.createElement(u,o(o({ref:n},s),{},{components:t})):a.createElement(u,o({ref:n},s))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,o=new Array(l);o[0]=c;var r={};for(var p in n)hasOwnProperty.call(n,p)&&(r[p]=n[p]);r.originalType=e,r[m]="string"==typeof e?e:i,o[1]=r;for(var g=2;g<l;g++)o[g]=t[g];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},1013:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>g});var a=t(8168),i=(t(6540),t(5680));const l={sidebar_position:20},o="Configuration with JSON",r={unversionedId:"configuration/json",id:"configuration/json",title:"Configuration with JSON",description:"Klogging can be configured from JSON files. This example is exactly equivalent to",source:"@site/docs/configuration/json.md",sourceDirName:"configuration",slug:"/configuration/json",permalink:"/docs/configuration/json",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Configuration DSL",permalink:"/docs/configuration/dsl"},next:{title:"Configuration with HOCON",permalink:"/docs/configuration/hocon"}},p={},g=[{value:"Locating configuration files",id:"locating-configuration-files",level:2},{value:"Configuration object names",id:"configuration-object-names",level:2},{value:"<code>sinks</code>",id:"sinks",level:3},{value:"<code>logging</code>",id:"logging",level:3},{value:"<code>levelRanges</code>",id:"levelranges",level:3},{value:"Other options",id:"other-options",level:3},{value:"<code>kloggingMinLogLevel</code>",id:"kloggingminloglevel",level:4},{value:"<code>minDirectLogLevel</code>",id:"mindirectloglevel",level:4},{value:"<code>baseContext</code>",id:"basecontext",level:4}],s={toc:g},m="wrapper";function d(e){let{components:n,...t}=e;return(0,i.yg)(m,(0,a.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"configuration-with-json"},"Configuration with JSON"),(0,i.yg)("p",null,"Klogging can be configured from JSON files. This example is exactly equivalent to\nthe ",(0,i.yg)("a",{parentName:"p",href:"dsl#a-simple-example"},"first DSL example"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "sinks": {\n    "stdout": {\n      "renderWith": "RENDER_SIMPLE",\n      "sendTo": "STDOUT"\n    },\n    "seq": {\n      "seqServer": "http://localhost:5341"\n    }\n  },\n  "logging": [\n    {\n      "fromLoggerBase": "com.example",\n      "levelRanges": [\n        {\n          "fromMinLevel": "INFO",\n          "toSinks": [\n            "stdout"\n          ]\n        }\n      ]\n    }\n  ]\n}\n')),(0,i.yg)("h2",{id:"locating-configuration-files"},"Locating configuration files"),(0,i.yg)("p",null,"Klogging looks for configuration files as follows:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"If the environment variable ",(0,i.yg)("inlineCode",{parentName:"li"},"KLOGGING_CONFIG_PATH")," exists, load the file at that absolute path if\nit exists."),(0,i.yg)("li",{parentName:"ol"},"Search the classpath for the file ",(0,i.yg)("inlineCode",{parentName:"li"},"klogging.json")," first, and ",(0,i.yg)("inlineCode",{parentName:"li"},"klogging.conf"),".")),(0,i.yg)("p",null,"If a configuration file is found it is read as JSON or HOCON."),(0,i.yg)("admonition",{type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"JSON file names must end with ",(0,i.yg)("inlineCode",{parentName:"p"},".json")," and HOCON files must end with ",(0,i.yg)("inlineCode",{parentName:"p"},".conf"),".")),(0,i.yg)("h2",{id:"configuration-object-names"},"Configuration object names"),(0,i.yg)("h3",{id:"sinks"},(0,i.yg)("inlineCode",{parentName:"h3"},"sinks")),(0,i.yg)("p",null,"Equivalent to the ",(0,i.yg)("a",{parentName:"p",href:"dsl#sink"},"sinks")," DSL function. Object keyed by sink name with keys:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"renderWith"),": name of a ",(0,i.yg)("a",{parentName:"p",href:"built-ins#rendering"},"built-in renderer"),". Current values\nare ",(0,i.yg)("inlineCode",{parentName:"p"},"RENDER_SIMPLE"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"RENDER_ISO8601"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"RENDER_ANSI"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"RENDER_CLEF")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"RENDER_GELF"),".")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"sendTo"),": name of a ",(0,i.yg)("a",{parentName:"p",href:"built-ins#sending"},"built-in sender"),". Current values are ",(0,i.yg)("inlineCode",{parentName:"p"},"STDOUT")," and\n",(0,i.yg)("inlineCode",{parentName:"p"},"STDERR"),".")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"seqServer"),": URL of a ",(0,i.yg)("a",{parentName:"p",href:"https://datalust.co"},"Seq server")," where events are to be dispatched. By\ndefault, the RENDER_CLEF renderer is used.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"apiKey"),": a Seq API key. It is a secret that should be passed in via an environment variable, for\nexample: ",(0,i.yg)("inlineCode",{parentName:"p"},'"apiKey": "${SEQ_API_KEY}"'))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"checkCertificate"),": a boolean value (default ",(0,i.yg)("inlineCode",{parentName:"p"},"true"),") that specifies if the TLS certificate used by\na secure ",(0,i.yg)("inlineCode",{parentName:"p"},"seqServer")," URL should be checked.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"splunkServer"),": connection details for a ",(0,i.yg)("a",{parentName:"p",href:"https://www.splunk.com"},"Splunk HEC endpoint"),":"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"hecUrl")," specifies the URL of the Splunk server\u2019s HEC endpoint. It uses HTTPS by default."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"hecToken")," is the HEC token used by Splunk for these logging events. It is a secret\nthat should be passed in via the execution environment."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"index")," is the Splunk index for the events (optional). If set, it must be a value configured\nin Splunk. If not set, Splunk will use the default index configured for the HEC token."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"sourceType")," is the Splunk ",(0,i.yg)("inlineCode",{parentName:"li"},"sourcetype")," value (optional). If not set, Splunk will use\n",(0,i.yg)("inlineCode",{parentName:"li"},"httpevent")," or a value configured for the HEC token."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"source")," is the Splunk ",(0,i.yg)("inlineCode",{parentName:"li"},"source")," value, typically the name of an application (optional).\nIf not set, Splunk will use a name configured with the HEC token."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"checkCertificate")," indicates whether Klogging should check the TLS certificate used by the\nSplunk server (string: default ",(0,i.yg)("inlineCode",{parentName:"li"},'"true"'),").")))),(0,i.yg)("p",null,"An example of a Splunk sink called ",(0,i.yg)("inlineCode",{parentName:"p"},"splunk")," is:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "splunk": {\n    "splunkServer": {\n      "hecUrl": "https://localhost:8088",\n      "hecToken": "${SPLUNK_HEC_TOKEN}",\n      "source": "MyApplication",\n      "checkCertificate": "false"\n    }\n  }\n}\n')),(0,i.yg)("admonition",{type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"You should have only one of ",(0,i.yg)("inlineCode",{parentName:"p"},"splunkServer"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"seqServer")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"sendTo")," in a sink. If\nyou have more than one, ",(0,i.yg)("inlineCode",{parentName:"p"},"splunkServer")," takes precedence over ",(0,i.yg)("inlineCode",{parentName:"p"},"seqServer"),", which takes\nprecedence over ",(0,i.yg)("inlineCode",{parentName:"p"},"sendTo"),".")),(0,i.yg)("p",null,"You can create a\n",(0,i.yg)("a",{parentName:"p",href:"../concepts/rendering-and-sending#custom-rendering-and-sending"},"custom renderer or sender"),"\nand include its fully-qualified class name in a sink definition."),(0,i.yg)("h3",{id:"logging"},(0,i.yg)("inlineCode",{parentName:"h3"},"logging")),(0,i.yg)("p",null,"Equivalent to the ",(0,i.yg)("a",{parentName:"p",href:"dsl#logging"},"logging")," DSL function. Array of objects, each with optional keys:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"fromLoggerBase"),": base name to match logger names.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"exactLogger"),": exact name of logger to match.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"matchLogger"),": a ",(0,i.yg)("a",{parentName:"p",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/"},"Kotlin regular expression"),"\npattern used to match logger names."))),(0,i.yg)("admonition",{type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"You should specify only one of these in a ",(0,i.yg)("inlineCode",{parentName:"p"},"logging")," object. If more are specified,\n",(0,i.yg)("inlineCode",{parentName:"p"},"matchLogger")," takes precedence over ",(0,i.yg)("inlineCode",{parentName:"p"},"exactLogger"),", which takes precedence over\n",(0,i.yg)("inlineCode",{parentName:"p"},"fromLoggerBase"),".")),(0,i.yg)("admonition",{type:"info"},(0,i.yg)("p",{parentName:"admonition"},"If you specify no key, all loggers will match. This configuration is the equivalent of the root\nlogger in Log4j or Logback.")),(0,i.yg)("h3",{id:"levelranges"},(0,i.yg)("inlineCode",{parentName:"h3"},"levelRanges")),(0,i.yg)("p",null,"Array of objects, each with keys:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"fromMinLevel"),": Name of the minimum level for log events to be emitted. For example, if the value\nis ",(0,i.yg)("inlineCode",{parentName:"p"},"INFO")," then events at severity ",(0,i.yg)("inlineCode",{parentName:"p"},"INFO"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"ERROR")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"FATAL")," will be emitted. Equivalent to\nthe ",(0,i.yg)("a",{parentName:"p",href:"dsl#fromminlevel-tomaxlevel-atlevel-and-inlevelrange"},"fromMinLevel")," DSL function.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"toMaxLevel"),": Name of the maximum level for log events to be emitted. For example, if the value\nis ",(0,i.yg)("inlineCode",{parentName:"p"},"INFO")," then events at severity ",(0,i.yg)("inlineCode",{parentName:"p"},"TRACE"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"DEBUG")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"INFO")," will be emitted. Equivalent to\nthe ",(0,i.yg)("a",{parentName:"p",href:"dsl#fromminlevel-tomaxlevel-atlevel-and-inlevelrange"},"toMaxLevel")," DSL function.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"You can combine ",(0,i.yg)("inlineCode",{parentName:"p"},"fromMinLevel")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"toMaxLevel")," values to set an inclusive range of levels.\nEquivalent to the ",(0,i.yg)("a",{parentName:"p",href:"dsl#fromminlevel-tomaxlevel-atlevel-and-inlevelrange"},"inLevelRange")," DSL function.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"atLevel"),": Name of the exact level at which log events will be emitted. Equivalent to\nthe ",(0,i.yg)("a",{parentName:"p",href:"dsl#fromminlevel-tomaxlevel-atlevel-and-inlevelrange"},"atLevel")," DSL function.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"toSinks"),": Array of sink names where events will be sent. If it does not match a key of\nthe ",(0,i.yg)("inlineCode",{parentName:"p"},"sinks")," object, a  warning is written to the console and the configuration is ignored."))),(0,i.yg)("admonition",{type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"You must specify at least one ",(0,i.yg)("inlineCode",{parentName:"p"},"levelRange")," object with at least one matching sink name or no logs\nwill be emitted.")),(0,i.yg)("h3",{id:"other-options"},"Other options"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "kloggingMinLogLevel": "DEBUG",\n  "minDirectLogLevel": "INFO",\n  "baseContext": {\n    "appName": "analysis-service",\n    "buildNumber": "${BUILD_NUMBER}"\n  }\n}\n')),(0,i.yg)("h4",{id:"kloggingminloglevel"},(0,i.yg)("inlineCode",{parentName:"h4"},"kloggingMinLogLevel")),(0,i.yg)("p",null,"Set the minimum level of the ",(0,i.yg)("a",{parentName:"p",href:"../internals/internal-logger"},"Klogging internal logger"),"."),(0,i.yg)("h4",{id:"mindirectloglevel"},(0,i.yg)("inlineCode",{parentName:"h4"},"minDirectLogLevel")),(0,i.yg)("p",null,"Set the minimum level for ",(0,i.yg)("a",{parentName:"p",href:"../concepts/direct-logging"},"sending log events directly to sinks"),"."),(0,i.yg)("h4",{id:"basecontext"},(0,i.yg)("inlineCode",{parentName:"h4"},"baseContext")),(0,i.yg)("p",null,"Specify ",(0,i.yg)("a",{parentName:"p",href:"../context/base-context"},"context items to add to every log event"),"."))}d.isMDXComponent=!0}}]);