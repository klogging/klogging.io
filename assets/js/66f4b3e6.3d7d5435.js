"use strict";(self.webpackChunkklogging=self.webpackChunkklogging||[]).push([[293],{3905:function(n,e,t){t.d(e,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var s=r.createContext({}),l=function(n){var e=r.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},u=function(n){var e=l(n.components);return r.createElement(s.Provider,{value:e},n.children)},g={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,i=n.originalType,s=n.parentName,u=c(n,["components","mdxType","originalType","parentName"]),p=l(t),f=o,m=p["".concat(s,".").concat(f)]||p[f]||g[f]||i;return t?r.createElement(m,a(a({ref:e},u),{},{components:t})):r.createElement(m,a({ref:e},u))}));function f(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var i=t.length,a=new Array(i);a[0]=p;var c={};for(var s in e)hasOwnProperty.call(e,s)&&(c[s]=e[s]);c.originalType=n,c.mdxType="string"==typeof n?n:o,a[1]=c;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4236:function(n,e,t){t.r(e),t.d(e,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return g}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],c={sidebar_position:20},s="Asynchronous handling of log events",l={unversionedId:"coroutines/async",id:"coroutines/async",title:"Asynchronous handling of log events",description:"Coroutines provide a simple way to asynchronously handle log events, including dispatching them to different",source:"@site/docs/coroutines/async.md",sourceDirName:"coroutines",slug:"/coroutines/async",permalink:"/docs/coroutines/async",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Coroutine context",permalink:"/docs/coroutines/context"},next:{title:"Using Klogging directly",permalink:"/docs/java/klogging-from-java"}},u={},g=[],p={toc:g};function f(n){var e=n.components,c=(0,o.Z)(n,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,c,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"asynchronous-handling-of-log-events"},"Asynchronous handling of log events"),(0,i.kt)("p",null,"Coroutines provide a simple way to asynchronously handle log events, including dispatching them to different\nsinks."),(0,i.kt)("p",null,"Klogging launches new coroutines that are used in a number of places:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For dispatching log events to sinks."),(0,i.kt)("li",{parentName:"ul"},"For receiving log events from event and sink channels."),(0,i.kt)("li",{parentName:"ul"},"For sending batches of log events to network destinations.")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Klogging process diagram",src:t(3577).Z,width:"701",height:"301"})),(0,i.kt)("p",null,"In addition, Klogging uses coroutine channels to process events."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"All log events are ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/klogging/klogging/blob/main/src/commonMain/kotlin/io/klogging/internal/Emitter.kt#L59"},"sent into the events channel"),"\nin a coroutine.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"They are read in a different coroutine and dispatched to each matching sink by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/klogging/klogging/blob/main/src/commonMain/kotlin/io/klogging/internal/Sink.kt#L70"},"sending\nit into each sink"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Events are ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/klogging/klogging/blob/main/src/commonMain/kotlin/io/klogging/sending/Batching.kt#L49"},"read from sink channels in batches"),"\nin different coroutines."))))}f.isMDXComponent=!0},3577:function(n,e,t){e.Z=t.p+"assets/images/klogging-process-03a26314c831a421268e1ca4e4b73cf9.svg"}}]);