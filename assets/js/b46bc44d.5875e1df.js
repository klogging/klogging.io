"use strict";(self.webpackChunkklogging=self.webpackChunkklogging||[]).push([[65],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var g=r.createContext({}),c=function(e){var n=r.useContext(g),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(g.Provider,{value:n},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,g=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=c(t),m=o,f=s["".concat(g,".").concat(m)]||s[m]||u[m]||i;return t?r.createElement(f,a(a({ref:n},p),{},{components:t})):r.createElement(f,a({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var l={};for(var g in n)hasOwnProperty.call(n,g)&&(l[g]=n[g]);l.originalType=e,l[s]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7843:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return g},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],l={sidebar_position:10},g="Defining loggers",c={unversionedId:"loggers/defining-loggers",id:"loggers/defining-loggers",title:"Defining loggers",description:"Klogging provides a number of ways of defining loggers.",source:"@site/docs/loggers/defining-loggers.md",sourceDirName:"loggers",slug:"/loggers/defining-loggers",permalink:"/docs/loggers/defining-loggers",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"From other sources",permalink:"/docs/context/other-context"},next:{title:"Sending log events",permalink:"/docs/logging/sending-logs"}},p={},s=[{value:"Implement <code>Klogging</code> interface",id:"implement-klogging-interface",level:2},{value:"Define a logger directly",id:"define-a-logger-directly",level:2},{value:"Static reference",id:"static-reference",level:2}],u={toc:s},m="wrapper";function f(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)(m,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"defining-loggers"},"Defining loggers"),(0,i.kt)("p",null,"Klogging provides a number of ways of defining loggers."),(0,i.kt)("h2",{id:"implement-klogging-interface"},"Implement ",(0,i.kt)("inlineCode",{parentName:"h2"},"Klogging")," interface"),(0,i.kt)("p",null,"The interface ",(0,i.kt)("inlineCode",{parentName:"p"},"io.klogging.Klogging")," includes a ",(0,i.kt)("inlineCode",{parentName:"p"},"logger")," property that returns a\n",(0,i.kt)("inlineCode",{parentName:"p"},"Klogger")," instance with the name of the class. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'package com.example\n\nimport io.klogging.Klogging\n\nclass ImportantService : Klogging {\n\n    suspend fun beImportant() {\n        // This logger has the name "com.example.ImportantService".\n        logger.info("Being important")\n    }\n}\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Klogging")," functions are all ",(0,i.kt)("inlineCode",{parentName:"p"},"suspend")," functions to be called in coroutine contexts.")),(0,i.kt)("p",null,"Similarly, for non-coroutine contexts, the ",(0,i.kt)("inlineCode",{parentName:"p"},"NoCoLogging")," interface has a ",(0,i.kt)("inlineCode",{parentName:"p"},"logger")," property that\nreturns a ",(0,i.kt)("inlineCode",{parentName:"p"},"NoCoLogger")," instance. ",(0,i.kt)("inlineCode",{parentName:"p"},"NoCoLogger")," has the same functions as ",(0,i.kt)("inlineCode",{parentName:"p"},"Klogger")," but they are\nnot ",(0,i.kt)("inlineCode",{parentName:"p"},"suspend")," functions."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"logger")," property is not static and its ",(0,i.kt)("inlineCode",{parentName:"p"},"get()")," function is called every time it is\nreferenced. You can define a logger directly if performance is important.")),(0,i.kt)("h2",{id:"define-a-logger-directly"},"Define a logger directly"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"logger()")," function defines a logger directly by name, by class or by reified type.\nThe following calls to ",(0,i.kt)("inlineCode",{parentName:"p"},"logger")," are equivalent:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'package com.example\n\nimport io.klogging.logger\n\nclass BusyService {\n    val loggerByReifiedType = logger<BusyService>()\n    val loggerByClass = logger(BusyService::class)\n    val loggerByName = logger("com.example.BusyService")\n}\n')),(0,i.kt)("p",null,"All three ",(0,i.kt)("inlineCode",{parentName:"p"},"loggerByReifiedType"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"loggerByClass")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"loggerByName")," refer to the same logger\ninstance because they have the same name"),(0,i.kt)("h2",{id:"static-reference"},"Static reference"),(0,i.kt)("p",null,"For a single reference to a logger that is not looked up every time, define it in the companion\nobject of a class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class VeryBusyService {\n    companion object {\n        logger = logger<VeryBusyService>()\n    }\n}\n")))}f.isMDXComponent=!0}}]);