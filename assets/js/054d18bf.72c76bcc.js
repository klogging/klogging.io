"use strict";(self.webpackChunkklogging=self.webpackChunkklogging||[]).push([[281],{5680:(e,n,r)=>{r.d(n,{xA:()=>s,yg:()=>m});var t=r(6540);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function g(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=t.createContext({}),d=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},s=function(e){var n=d(e.components);return t.createElement(l.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,s=g(e,["components","mdxType","originalType","parentName"]),p=d(r),u=i,m=p["".concat(l,".").concat(u)]||p[u]||c[u]||a;return r?t.createElement(m,o(o({ref:n},s),{},{components:r})):t.createElement(m,o({ref:n},s))}));function m(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=u;var g={};for(var l in n)hasOwnProperty.call(n,l)&&(g[l]=n[l]);g.originalType=e,g[p]="string"==typeof e?e:i,o[1]=g;for(var d=2;d<a;d++)o[d]=r[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2641:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>g,toc:()=>d});var t=r(8168),i=(r(6540),r(5680));const a={sidebar_position:50},o="Rendering and sending",g={unversionedId:"concepts/rendering-and-sending",id:"concepts/rendering-and-sending",title:"Rendering and sending",description:"Log events are rendered before being sent to sinks.",source:"@site/docs/concepts/rendering-and-sending.md",sourceDirName:"concepts",slug:"/concepts/rendering-and-sending",permalink:"/docs/concepts/rendering-and-sending",draft:!1,tags:[],version:"current",sidebarPosition:50,frontMatter:{sidebar_position:50},sidebar:"tutorialSidebar",previous:{title:"Sinks",permalink:"/docs/concepts/sinks"},next:{title:"Direct logging",permalink:"/docs/concepts/direct-logging"}},l={},d=[{value:"Rendering",id:"rendering",level:2},{value:"Sending",id:"sending",level:2},{value:"Rendering and sending",id:"rendering-and-sending-1",level:2},{value:"Custom rendering and sending",id:"custom-rendering-and-sending",level:2}],s={toc:d},p="wrapper";function c(e){let{components:n,...r}=e;return(0,i.yg)(p,(0,t.A)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"rendering-and-sending"},"Rendering and sending"),(0,i.yg)("p",null,"Log events are ",(0,i.yg)("em",{parentName:"p"},"rendered")," before being ",(0,i.yg)("em",{parentName:"p"},"sent")," to ",(0,i.yg)("a",{parentName:"p",href:"sinks"},"sinks"),"."),(0,i.yg)("h2",{id:"rendering"},"Rendering"),(0,i.yg)("p",null,"The type ",(0,i.yg)("inlineCode",{parentName:"p"},"RenderString")," is implemented to render events into string\nrepresentations of them:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},"public interface RenderString {\n    public operator fun invoke(event: LogEvent): String\n}\n")),(0,i.yg)("h2",{id:"sending"},"Sending"),(0,i.yg)("p",null,"The type ",(0,i.yg)("inlineCode",{parentName:"p"},"SendString")," is implemented to send rendered events to a sink somewhere:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},"public interface SendString {\n    public operator fun invoke(eventString: String)\n}\n")),(0,i.yg)("h2",{id:"rendering-and-sending-1"},"Rendering and sending"),(0,i.yg)("p",null,"The type ",(0,i.yg)("inlineCode",{parentName:"p"},"EventSender")," is implemented to render a batch of events and send them to a sink:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},"public interface EventSender {\n    public operator fun invoke(batch: List<LogEvent>)\n}\n")),(0,i.yg)("p",null,"An ",(0,i.yg)("inlineCode",{parentName:"p"},"EventSender")," can be created from a ",(0,i.yg)("inlineCode",{parentName:"p"},"RenderString")," and a ",(0,i.yg)("inlineCode",{parentName:"p"},"SendString"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},'public fun senderFrom(renderer: RenderString, sender: SendString): EventSender = object : EventSender {\n    override fun invoke(batch: List<LogEvent>) {\n        sender(batch.joinToString("\\n") { renderer(it) })\n    }\n}\n')),(0,i.yg)("h2",{id:"custom-rendering-and-sending"},"Custom rendering and sending"),(0,i.yg)("p",null,"If you need rendering or sending not available using\n",(0,i.yg)("a",{parentName:"p",href:"../configuration/built-ins"},"built-in renderers"),", you can implement a custom renderer or sender.\nAn example renderer is:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},"object MessageOnly : RenderString {\n    override operator fun invoke(event: LogEvent) = event.message\n}\n")),(0,i.yg)("p",null,"In ",(0,i.yg)("a",{parentName:"p",href:"../configuration/dsl"},"DSL configuration")," you can specify it with:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},'loggingConfiguration {\n    sink("messages", MessageOnly, STDOUT)\n    // etc.\n}\n')),(0,i.yg)("p",null,"An example ",(0,i.yg)("inlineCode",{parentName:"p"},"EventSender")," might be:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-kotlin"},"package mjs.example\n\n// imports here\n\nclass ConsoleSender : EventSender {\n    override fun invoke(batch: List<LogEvent>) {\n        batch.forEach { logEvent ->\n            if (logEvent.level > Level.INFO) {\n                STDERR(RENDER_ANSI(logEvent))\n            } else {\n                STDOUT(RENDER_ANSI(logEvent))\n            }\n        }\n    }\n}\n")),(0,i.yg)("p",null,"In ",(0,i.yg)("a",{parentName:"p",href:"../configuration/hocon"},"HOCON configuration")," you can specify it with:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-hocon"},'{\n  sinks = {\n    console = {\n      eventSender = "mjs.example.ConsoleSender"\n    }\n  }\n  // etc.\n}\n')))}c.isMDXComponent=!0}}]);