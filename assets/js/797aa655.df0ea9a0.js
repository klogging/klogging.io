"use strict";(self.webpackChunkklogging=self.webpackChunkklogging||[]).push([[364],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),g=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=g(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=g(t),m=l,d=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return t?a.createElement(d,o(o({ref:n},p),{},{components:t})):a.createElement(d,o({ref:n},p))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,o=new Array(i);o[0]=u;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:l,o[1]=r;for(var g=2;g<i;g++)o[g]=t[g];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9196:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return r},metadata:function(){return g},toc:function(){return c}});var a=t(7462),l=t(3366),i=(t(7294),t(3905)),o=["components"],r={sidebar_position:10},s="Sending log events",g={unversionedId:"logging/sending-logs",id:"logging/sending-logs",title:"Sending log events",description:"Once you have a logger, you can call functions on it to send log events. The base function is log():",source:"@site/docs/logging/sending-logs.md",sourceDirName:"logging",slug:"/logging/sending-logs",permalink:"/docs/logging/sending-logs",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Defining loggers",permalink:"/docs/loggers/defining-loggers"},next:{title:"Coroutines",permalink:"/docs/coroutines/"}},p={},c=[{value:"Utility functions",id:"utility-functions",level:2},{value:"Logging patterns",id:"logging-patterns",level:2},{value:"String message",id:"string-message",level:3},{value:"Message template",id:"message-template",level:3},{value:"Exception",id:"exception",level:3},{value:"Minimum level check",id:"minimum-level-check",level:3},{value:"Kotlin lambda",id:"kotlin-lambda",level:3},{value:"Lambda and exception",id:"lambda-and-exception",level:3}],u={toc:c};function m(e){var n=e.components,r=(0,l.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sending-log-events"},"Sending log events"),(0,i.kt)("p",null,"Once you have a logger, you can call functions on it to send log events. The base function is ",(0,i.kt)("inlineCode",{parentName:"p"},"log()"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'    logger.log(Level.INFO, "Application started")\n')),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"All the information here applies to both the coroutine logger ",(0,i.kt)("inlineCode",{parentName:"p"},"Klogger")," and the non-coroutine\nlogger ",(0,i.kt)("inlineCode",{parentName:"p"},"NoCoLogger"),"."))),(0,i.kt)("h2",{id:"utility-functions"},"Utility functions"),(0,i.kt)("p",null,"These utility functions are a convenient way to send logs. They call ",(0,i.kt)("inlineCode",{parentName:"p"},"log()")," with the\nappropriate level:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"trace()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"debug()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"info()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"warn()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"error()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fatal()"))),(0,i.kt)("h2",{id:"logging-patterns"},"Logging patterns"),(0,i.kt)("p",null,"Klogging offers a range of patterns for different logging scenarios. The patterns shown here apply\nto ",(0,i.kt)("inlineCode",{parentName:"p"},"log()")," and all utility functions."),(0,i.kt)("h3",{id:"string-message"},"String message"),(0,i.kt)("p",null,"The simplest pattern is to send a string, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'    logger.info("Processing started")\n    // meaningful code\n    val response = callOtherService()\n    logger.info("User response was ${response.text}")\n')),(0,i.kt)("h3",{id:"message-template"},"Message template"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../concepts/message-templates"},"Message templates")," provide a convenient way to both create meaningful\nmessages and to create structured log events:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'    logger.info("User {userId} signed in", userId)\n')),(0,i.kt)("p",null,"The resulting log event contains both:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the message populated with the value of ",(0,i.kt)("inlineCode",{parentName:"li"},"userId"),"; and"),(0,i.kt)("li",{parentName:"ul"},"an item called ",(0,i.kt)("inlineCode",{parentName:"li"},"userId")," with the same value.")),(0,i.kt)("p",null,"For example, if ",(0,i.kt)("inlineCode",{parentName:"p"},"userId")," has the value ",(0,i.kt)("inlineCode",{parentName:"p"},"wonti321")," then:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the message becomes ",(0,i.kt)("inlineCode",{parentName:"li"},"User wonti321 signed in"),"; and"),(0,i.kt)("li",{parentName:"ul"},"the log event contains ",(0,i.kt)("inlineCode",{parentName:"li"},'"userId": "wonti321"'),".")),(0,i.kt)("p",null,"The log event displayed in Splunk may look like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Example of structured event message in Splunk",src:t(5007).Z,width:"672",height:"290"})),(0,i.kt)("h3",{id:"exception"},"Exception"),(0,i.kt)("p",null,"To log exception information, include the exception object as the first argument in the function call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'    try {\n        // This might throw an exception\n        snurgle(id, agger)\n    } catch (ex: SnurgleException) {\n        logger.warn(ex, "Exception calling snurgle with id={id} and agger={agger}", id, agger)\n    }\n')),(0,i.kt)("p",null,"The resulting log event will include any stack trace included in the exception."),(0,i.kt)("h3",{id:"minimum-level-check"},"Minimum level check"),(0,i.kt)("p",null,"Every logger has a minimum level set by configuration, below which log events are not sent.\nSee ",(0,i.kt)("a",{parentName:"p",href:"../internals/level-checking"},"Log levels and checking")," for more details."),(0,i.kt)("p",null,"Klogging provides functions to check minimum levels to call before calling a logging function\nif the values to be logged are expensive to obtain."),(0,i.kt)("p",null,"Here is one example, where ",(0,i.kt)("inlineCode",{parentName:"p"},"DEBUG")," logging might not be enabled for this logger in all environments:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'    if (logger.isDebugEnabled()) {\n        val complex = calculateSpecialValueForDebugging()\n        val other = extractOtherValueFromSomewhereElse()\n        logger.debug("Calculated {complex} and {other}", complex, other)\n    }\n')),(0,i.kt)("p",null,"Likewise, there are functions ",(0,i.kt)("inlineCode",{parentName:"p"},"isTraceEnabled()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"isInfoEnabled()")," etc."),(0,i.kt)("h3",{id:"kotlin-lambda"},"Kotlin lambda"),(0,i.kt)("p",null,"The idiomatic Kotlin way to send a log event that might be expensive is to use a lambda.\nThe lambda is only called if the minimum level check evaluates ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,"It is simple when logging a string message:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'    logger.trace { "Starting run with ID=$runId" }\n')),(0,i.kt)("p",null,"Here, a log event is only sent if ",(0,i.kt)("inlineCode",{parentName:"p"},"logger.isTraceEnabled()")," evaluates ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,"The lambda can only return a single value, so if you want to use a message template, you\ncan call the ",(0,i.kt)("inlineCode",{parentName:"p"},"e()")," function as the return value of the lambda:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'    logger.debug {\n        val complex = calculateSpecialValueForDebugging()\n        val other = extractOtherValueFromSomewhereElse()\n        e("Calculated {complex} and {other}", complex, other)\n    }\n')),(0,i.kt)("h3",{id:"lambda-and-exception"},"Lambda and exception"),(0,i.kt)("p",null,"Combine a lambda and an exception like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'    logger.warn(ex) { "Exception processing payment" }\n')))}m.isMDXComponent=!0},5007:function(e,n,t){n.Z=t.p+"assets/images/log-info-userId-splunk-7572d963c8f7ea7f0c9a9a037e3ce089.png"}}]);