"use strict";(self.webpackChunkklogging_io=self.webpackChunkklogging_io||[]).push([[5125],{8293:(t,e,o)=>{o.r(e),o.d(e,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>l});var n=o(4848),r=o(8453);const c={sidebar_position:40},i="From other coroutine contexts",s={id:"context/other-coroutine-context",title:"From other coroutine contexts",description:"Klogging can include information from other coroutine context elements.",source:"@site/docs/context/other-coroutine-context.md",sourceDirName:"context",slug:"/context/other-coroutine-context",permalink:"/docs/context/other-coroutine-context",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40},sidebar:"tutorialSidebar",previous:{title:"Immediate context items",permalink:"/docs/context/immediate-context-items"},next:{title:"From other sources",permalink:"/docs/context/other-context"}},a={},l=[];function x(t){const e={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,r.R)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"from-other-coroutine-contexts",children:"From other coroutine contexts"}),"\n",(0,n.jsx)(e.p,{children:"Klogging can include information from other coroutine context elements."}),"\n",(0,n.jsxs)(e.p,{children:["As an example, if your application is using ",(0,n.jsx)(e.a,{href:"https://projectreactor.io/",children:"Project Reactor"}),", you can\nstore information in a Reactor ",(0,n.jsx)(e.code,{children:"Context"})," and wrap that in a coroutine ",(0,n.jsx)(e.code,{children:"ReactorContext"}),"."]}),"\n",(0,n.jsxs)(e.p,{children:["Configure Klogging to use all the values from the Reactor context in log events (",(0,n.jsx)(e.code,{children:"EventItems"})," is a\nconvenient type alias for ",(0,n.jsx)(e.code,{children:"Map<String, Any?>"}),"):"]}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-kotlin",children:"import io.klogging.config.Context\nimport io.klogging.events.EventItems\nimport kotlinx.coroutines.reactor.ReactorContext\n\nval reactorExtractor: (ReactorContext) -> EventItems = { ctx ->\n    // TBC\n}\n\nContext.addContextItemExtractor(ReactorContext, reactorExtractor)\n"})}),"\n",(0,n.jsxs)(e.p,{children:["Any log events emitted within the scope of the Reactor context will include items returned by the\n",(0,n.jsx)(e.code,{children:"reactorExtractor()"})," function from that context."]})]})}function d(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(x,{...t})}):x(t)}},8453:(t,e,o)=>{o.d(e,{R:()=>i,x:()=>s});var n=o(6540);const r={},c=n.createContext(r);function i(t){const e=n.useContext(c);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:i(t.components),n.createElement(c.Provider,{value:e},t.children)}}}]);