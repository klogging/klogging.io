"use strict";(self.webpackChunkklogging=self.webpackChunkklogging||[]).push([[748],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),g=l(t),f=r,d=g["".concat(c,".").concat(f)]||g[f]||p[f]||i;return t?o.createElement(d,a(a({ref:n},u),{},{components:t})):o.createElement(d,a({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=g;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var l=2;l<i;l++)a[l]=t[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},603:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return g}});var o=t(7462),r=t(3366),i=(t(7294),t(3905)),a=["components"],s={sidebar_position:10},c="Coroutines",l={unversionedId:"coroutines/coroutines",id:"coroutines/coroutines",isDocsHomePage:!1,title:"Coroutines",description:"Kotlin coroutines provide two advantages to Klogging.",source:"@site/docs/coroutines/coroutines.md",sourceDirName:"coroutines",slug:"/coroutines/coroutines",permalink:"/docs/coroutines/coroutines",version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Sending log events",permalink:"/docs/logging/sending-logs"},next:{title:"Using Klogging directly",permalink:"/docs/java/klogging-from-java"}},u=[{value:"Contextual information management",id:"contextual-information-management",children:[]},{value:"Asynchronous dispatching of log events",id:"asynchronous-dispatching-of-log-events",children:[]}],p={toc:u};function g(e){var n=e.components,s=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},p,s,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"coroutines"},"Coroutines"),(0,i.kt)("p",null,"Kotlin coroutines provide two advantages to Klogging."),(0,i.kt)("h2",{id:"contextual-information-management"},"Contextual information management"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/klogging/klogging/src/commonMain/kotlin/io/klogging/context/LogContext.kt"},(0,i.kt)("inlineCode",{parentName:"a"},"LogContext")),"\nclass is designed to hold a map of contextual information in a\ncoroutine context. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'suspend fun complexLogic(input: EssentialStuff) = coroutineScope {\n    launch(logContext("runId" to input.runId)) {\n        logger.info { "Starting logic" }\n\n        // Do stuff, potentially logging events\n\n        logger.info { "Finished logic" }\n    }\n}\n')),(0,i.kt)("p",null,"The log events sent by any code within the scope of the launched\ncoroutine will contain a field called ",(0,i.kt)("inlineCode",{parentName:"p"},"runId")," with the value of\n",(0,i.kt)("inlineCode",{parentName:"p"},"input.runId")," for that particular run."),(0,i.kt)("p",null,(0,i.kt)("img",{src:t(2402).Z})),(0,i.kt)("p",null,"Coroutine context information is kept for the duration of the current coroutine scope\nand is automatically removed at the end of that scope. Context information is also\nautomatically moved between scopes as required."),(0,i.kt)("p",null,"This is easier to use and more flexible than Mapped Diagnostic Context (MDC) in Logback\nand ThreadContext in Log4J. Those contexts require callers to put remove items when\nfinished and to ensure items are moved between threads."),(0,i.kt)("h2",{id:"asynchronous-dispatching-of-log-events"},"Asynchronous dispatching of log events"),(0,i.kt)("p",null,"Coroutines provide a simple way to asynchronously dispatch log events to different\nsinks. Klogging ",(0,i.kt)("a",{parentName:"p",href:"../concepts/klogging-process"},"uses channels")," to process events."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"TBC")))}g.isMDXComponent=!0},2402:function(e,n,t){n.Z=t.p+"assets/images/seq-log-events-same-runId-83956a942f032b94febf2057ee7a686a.png"}}]);