"use strict";(self.webpackChunkklogging=self.webpackChunkklogging||[]).push([[294],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),s=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),f=r,d=p["".concat(l,".").concat(f)]||p[f]||m[f]||i;return n?o.createElement(d,a(a({ref:t},u),{},{components:n})):o.createElement(d,a({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:r,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8480:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],c={sidebar_position:50},l="Context Items",s={unversionedId:"configuration/context-items",id:"configuration/context-items",title:"Context Items",description:"Base Context",source:"@site/docs/configuration/context-items.md",sourceDirName:"configuration",slug:"/configuration/context-items",permalink:"/docs/configuration/context-items",draft:!1,tags:[],version:"current",sidebarPosition:50,frontMatter:{sidebar_position:50},sidebar:"tutorialSidebar",previous:{title:"Built-in configurations",permalink:"/docs/configuration/built-ins"},next:{title:"Defining loggers",permalink:"/docs/loggers/defining-loggers"}},u={},p=[{value:"Base Context",id:"base-context",level:2},{value:"From other coroutine context elements",id:"from-other-coroutine-context-elements",level:2}],m={toc:p},f="wrapper";function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)(f,(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"context-items"},"Context Items"),(0,i.kt)("h2",{id:"base-context"},"Base Context"),(0,i.kt)("p",null,"You can specify items to add to every Klogging log event in your application.\nExamples might be application name or a build identifier."),(0,i.kt)("p",null,"Specify them using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Context")," object, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'const val APP_NAME_KEY = "appName"\nconst val APP_NAME = "analysis-service"\nconst val BUILD_NUMBER_KEY = "buildNumber"\nconst val BUILD_NUMBER_ENV = "BUILD_NUMBER"\n\nContext.addBaseContext(\n    APP_NAME_KEY to APP_NAME,\n    BUILD_NUMBER_KEY to System.getenv(BUILD_NUMBER_ENV),\n)\n')),(0,i.kt)("p",null,"Log events include those values, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "@t": "2022-06-16T08:52:12.064882Z",\n  "@l": "INFO",\n  "@mt": "Execution time {elapsedMs} ms",\n  "host": "09b4396db8ae",\n  "appName": "analysis-service",\n  "buildNumber": "2.4.0-d22d0dd",\n  "logger": "com.wodgeworks.analysis.RunTimer",\n  "elapsedMs": "73",\n  "run": "a6f72c37-7e2f-4d69-a73f-7f493cb04d1d",\n  "context": "DefaultDispatcher-worker-3"\n}\n')),(0,i.kt)("h2",{id:"from-other-coroutine-context-elements"},"From other coroutine context elements"),(0,i.kt)("p",null,"Klogging can include information from other coroutine context elements."),(0,i.kt)("p",null,"As an example, if your application is using ",(0,i.kt)("a",{parentName:"p",href:"https://projectreactor.io/"},"Project Reactor"),", you can\nstore information in a Reactor ",(0,i.kt)("inlineCode",{parentName:"p"},"Context")," and wrap that in a coroutine ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactorContext"),"."),(0,i.kt)("p",null,"Configure Klogging to use all the values from the Reactor context in log events (",(0,i.kt)("inlineCode",{parentName:"p"},"EventItems")," is a\nconvenient type alias for ",(0,i.kt)("inlineCode",{parentName:"p"},"Map<String, Any?>"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"import io.klogging.config.Context\nimport io.klogging.events.EventItems\nimport kotlinx.coroutines.reactor.ReactorContext\n\nval reactorExtractor: (ReactorContext) -> EventItems = { ctx ->\n    // TBC\n}\n\nContext.addContextItemExtractor(ReactorContext, reactorExtractor)\n")),(0,i.kt)("p",null,"Any log events emitted within the scope of the Reactor context will include items returned by the\n",(0,i.kt)("inlineCode",{parentName:"p"},"reactorExtractor()")," function from that context."))}d.isMDXComponent=!0}}]);