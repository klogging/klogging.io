"use strict";(self.webpackChunkklogging_io=self.webpackChunkklogging_io||[]).push([[9173],{6484:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"internals/level-checking","title":"Log levels and checking","description":"Each logger has a minimum logging level per sink, set by configuration. The minimum value of the","source":"@site/docs/internals/level-checking.md","sourceDirName":"internals","slug":"/internals/level-checking","permalink":"/docs/internals/level-checking","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"sidebar_position":20},"sidebar":"tutorialSidebar","previous":{"title":"Environment variables","permalink":"/docs/internals/environment-variables"},"next":{"title":"Internal logger","permalink":"/docs/internals/internal-logger"}}');var s=i(4848),t=i(8453);const r={sidebar_position:20},o="Log levels and checking",c={},d=[{value:"Rules",id:"rules",level:2},{value:"Code",id:"code",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"log-levels-and-checking",children:"Log levels and checking"})}),"\n",(0,s.jsx)(n.p,{children:"Each logger has a minimum logging level per sink, set by configuration. The minimum value of the\nper-sink levels is the minimum level for the logger, which can be checked at any time."}),"\n",(0,s.jsx)(n.h2,{id:"rules",children:"Rules"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If a log request\u2019s level is less than the minimum for the logger that created it, no log event\nis created and emitted."}),"\n",(0,s.jsx)(n.li,{children:"When a log event is emitted, it is dispatched to at least one sink."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,s.jsxs)(n.p,{children:["Applicable to both ",(0,s.jsx)(n.code,{children:"Klogger"})," and ",(0,s.jsx)(n.code,{children:"NoCoLogger"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"trace()"}),", ",(0,s.jsx)(n.code,{children:"debug()"})," etc. functions are shims for ",(0,s.jsx)(n.code,{children:"log()"})," with a specified value of ",(0,s.jsx)(n.code,{children:"Level"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"isTraceEnabled()"}),", ",(0,s.jsx)(n.code,{children:"isDebugEnabled()"})," etc. functions are shims for ",(0,s.jsx)(n.code,{children:"isLevelEnabled()"})," with a\nspecified value of ",(0,s.jsx)(n.code,{children:"Level"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"log()"})," function with value arguments: only emits an event if ",(0,s.jsx)(n.code,{children:"isLevelEnabled()"})," for the requested\nlevel is ",(0,s.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"log()"})," function with lambda argument: only calls the lambda and emits an event\nif ",(0,s.jsx)(n.code,{children:"isLevelEnabled()"})," for the requested level is ",(0,s.jsx)(n.code,{children:"true"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var l=i(6540);const s={},t=l.createContext(s);function r(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);